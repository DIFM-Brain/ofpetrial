[{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://difm-brain.github.io/ofpetrial/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://difm-brain.github.io/ofpetrial/articles/V0-basic-work-flow.html","id":"prepare-plot-information-for-the-inputs","dir":"Articles","previous_headings":"Create experimental plots","what":"Prepare plot information for the inputs","title":"Basic Workflow","text":"start specifying plot machine information inputs using prep_plot, simply creates data.frame specified information internal unit conversion length (e.g., feet meter).","code":"#--- for nitrogen ---# n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 30,     section_num = 1,     harvester_width = 30,     plot_width = 30   ) #>   dplyr::glimpse(n_plot_info) #> Rows: 1 #> Columns: 11 #> $ input_name      <chr> \"NH3\" #> $ unit_system     <chr> \"imperial\" #> $ machine_width   <dbl> 9.144 #> $ section_num     <dbl> 1 #> $ section_width   <dbl> 9.144 #> $ harvester_width <dbl> 9.144 #> $ plot_width      <dbl> 9.144 #> $ headland_length <dbl> 18.288 #> $ side_length     <dbl> 9.144 #> $ min_plot_length <dbl> 73.152 #> $ max_plot_length <dbl> 91.44  #--- for seed ---# seed_plot_info <-   prep_plot(     input_name = \"seed\",     unit_system = \"imperial\",     machine_width = 60,     section_num = 24,     harvester_width = 30,     plot_width = 30   ) #>   dplyr::glimpse(seed_plot_info) #> Rows: 1 #> Columns: 11 #> $ input_name      <chr> \"seed\" #> $ unit_system     <chr> \"imperial\" #> $ machine_width   <dbl> 18.288 #> $ section_num     <dbl> 24 #> $ section_width   <dbl> 0.762 #> $ harvester_width <dbl> 9.144 #> $ plot_width      <dbl> 9.144 #> $ headland_length <dbl> 36.576 #> $ side_length     <dbl> 9.144 #> $ min_plot_length <dbl> 73.152 #> $ max_plot_length <dbl> 91.44"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V0-basic-work-flow.html","id":"create-experimental-plots-1","dir":"Articles","previous_headings":"Create experimental plots","what":"Create experimental plots","title":"Basic Workflow","text":"Now plot machine specifications inputs ready, can create experiment plots based using make_exp_plots(). Since two-input case, create list plot information provided make_exp_plots() along path field boudary ab-line files (can alternatively provide data sf objects.). experiment plots created make_exp_plots() stored exp_plots. exp_data$exp_plots list experimental plots sf. first element nitrogen second seed following order information provided input_plot_info. can access individual experiment plots (sf object) like . can visualize layout experiment plots using viz() type = \"layout\" option.  can see, ab-lines applicator/planter harvester generated input. show export ab-lines later.","code":"input_plot_info <- list(n_plot_info, seed_plot_info)  exp_data <-   make_exp_plots(     input_plot_info = input_plot_info,     boundary_data = system.file(\"extdata\", \"boundary-simple1.shp\", package = \"ofpetrial\"),     abline_data = system.file(\"extdata\", \"ab-line-simple1.shp\", package = \"ofpetrial\"),     abline_type = \"free\"   ) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `experiment_plots_dissolved = list(...)`. #> ℹ In row 1. #> Caused by warning: #> ! package 'sf' was built under R version 4.2.3 exp_data$exp_plots #> [[1]] #> Simple feature collection with 369 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 352988.4 ymin: 4331460 xmax: 353376.6 ymax: 4332198 #> Projected CRS: WGS 84 / UTM zone 28N #> First 10 features: #>    plot_id poly_line strip_id                       geometry #> 1        1       1_1        1 POLYGON ((353363.5 4331465,... #> 2        2       1_1        1 POLYGON ((353364.9 4331546,... #> 3        3       1_1        1 POLYGON ((353366.4 4331628,... #> 4        4       1_1        1 POLYGON ((353367.9 4331709,... #> 5        5       1_1        1 POLYGON ((353369.3 4331791,... #> 6        6       1_1        1 POLYGON ((353370.8 4331872,... #> 7        7       1_1        1 POLYGON ((353372.2 4331953,... #> 8        8       1_1        1 POLYGON ((353373.7 4332035,... #> 9        9       1_1        1 POLYGON ((353375.1 4332116,... #> 10       1       1_1        2 POLYGON ((353354.3 4331465,... #>  #> [[2]] #> Simple feature collection with 369 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 352988.4 ymin: 4331460 xmax: 353376.6 ymax: 4332198 #> Projected CRS: WGS 84 / UTM zone 28N #> First 10 features: #>    plot_id poly_line strip_id                       geometry #> 1        1       1_1        1 POLYGON ((353363.5 4331465,... #> 2        2       1_1        1 POLYGON ((353364.9 4331546,... #> 3        3       1_1        1 POLYGON ((353366.4 4331628,... #> 4        4       1_1        1 POLYGON ((353367.9 4331709,... #> 5        5       1_1        1 POLYGON ((353369.3 4331791,... #> 6        6       1_1        1 POLYGON ((353370.8 4331872,... #> 7        7       1_1        1 POLYGON ((353372.2 4331953,... #> 8        8       1_1        1 POLYGON ((353373.7 4332035,... #> 9        9       1_1        1 POLYGON ((353375.1 4332116,... #> 10       1       1_1        2 POLYGON ((353354.3 4331465,... exp_data$exp_plots[[1]] #> Simple feature collection with 369 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 352988.4 ymin: 4331460 xmax: 353376.6 ymax: 4332198 #> Projected CRS: WGS 84 / UTM zone 28N #> First 10 features: #>    plot_id poly_line strip_id                       geometry #> 1        1       1_1        1 POLYGON ((353363.5 4331465,... #> 2        2       1_1        1 POLYGON ((353364.9 4331546,... #> 3        3       1_1        1 POLYGON ((353366.4 4331628,... #> 4        4       1_1        1 POLYGON ((353367.9 4331709,... #> 5        5       1_1        1 POLYGON ((353369.3 4331791,... #> 6        6       1_1        1 POLYGON ((353370.8 4331872,... #> 7        7       1_1        1 POLYGON ((353372.2 4331953,... #> 8        8       1_1        1 POLYGON ((353373.7 4332035,... #> 9        9       1_1        1 POLYGON ((353375.1 4332116,... #> 10       1       1_1        2 POLYGON ((353354.3 4331465,... viz(exp_data, type = \"layout\", abline = TRUE)"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V0-basic-work-flow.html","id":"assign-rates","dir":"Articles","previous_headings":"","what":"Assign rates","title":"Basic Workflow","text":"Let’s now assign input rates experimental plots just created. , need prepare rate information inputs using prep_rate(). , design_type = \"ls\" (Latin Square) used seed nitrogen experiments (see article design options article changing rates manually.).","code":""},{"path":"https://difm-brain.github.io/ofpetrial/articles/V0-basic-work-flow.html","id":"prepare-rate-information","dir":"Articles","previous_headings":"Assign rates","what":"Prepare rate information","title":"Basic Workflow","text":"can use prep_rate() prepare rate information assigning rates experimental plots. nitrogen, exact rates specified rates option, trial design type specified “ls” (short Latin Square). seed, minimum maximum rates, number rates specified. case, code interally finds rates automatilly .","code":"#!=========================================================== # ! Assign rates # !=========================================================== n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 140, 180, 220, 260),     design_type = \"ls\",     rank_seq_ws = c(5, 4, 3, 2, 1)   )  dplyr::glimpse(n_rate_info) #> Rows: 1 #> Columns: 12 #> $ input_name          <chr> \"NH3\" #> $ design_type         <chr> \"ls\" #> $ gc_rate             <dbl> 180 #> $ unit                <chr> \"lb\" #> $ tgt_rate_original   <list> <100, 140, 180, 220, 260> #> $ tgt_rate_equiv      <list> <82.0, 114.8, 147.6, 180.4, 213.2> #> $ min_rate            <lgl> NA #> $ max_rate            <lgl> NA #> $ num_rates           <int> 5 #> $ rank_seq_ws         <list> <5, 4, 3, 2, 1> #> $ rank_seq_as         <list> <NULL> #> $ rate_jump_threshold <lgl> NA  seed_rate_info <-   prep_rate(     plot_info = seed_plot_info,     gc_rate = 32000,     unit = \"seed\",     min_rate = 16000,     max_rate = 40000,     num_rates = 4,     design_type = \"ls\"   ) #> Trial rates were not directly specified via the {rates} option, so the trial rates will be calculated using min_rate, max_rate, gc_rate, and num_rates  dplyr::glimpse(seed_rate_info) #> Rows: 1 #> Columns: 12 #> $ input_name          <chr> \"seed\" #> $ design_type         <chr> \"ls\" #> $ gc_rate             <dbl> 32000 #> $ unit                <chr> \"seed\" #> $ tgt_rate_original   <list> <16000, 24000, 32000, 40000> #> $ tgt_rate_equiv      <list> <16000, 24000, 32000, 40000> #> $ min_rate            <dbl> 16000 #> $ max_rate            <dbl> 40000 #> $ num_rates           <dbl> 4 #> $ rank_seq_ws         <list> <NULL> #> $ rank_seq_as         <list> <NULL> #> $ rate_jump_threshold <lgl> NA"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V0-basic-work-flow.html","id":"assign-rates-1","dir":"Articles","previous_headings":"Assign rates","what":"Assign rates","title":"Basic Workflow","text":"can now use assign_rates() assign rates experiment plots. visualization trial design done viz.  Along spatial pattern input rates, applicator/planter ab-line harvester ab-line drawn default.","code":"trial_design <- assign_rates(exp_data, rate_info = list(n_rate_info, seed_rate_info)) viz(trial_design, abline = TRUE)"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V0-basic-work-flow.html","id":"diagnose-the-trial-design","dir":"Articles","previous_headings":"","what":"Diagnose the trial design","title":"Basic Workflow","text":"ofpetrial package offers several functions check soundness trial design (see article details examples). , let’s check correlation seed NH3 rates. correlation coefficient 0.01, certainly acceptable.","code":"(   cor_inputs <- check_ortho_inputs(trial_design) ) #> Checking the correlation between the two inputs. This may take some time depending on the number of experiment plots. #> [1] 0.01184833"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V0-basic-work-flow.html","id":"make-a-trial-design-report","dir":"Articles","previous_headings":"","what":"Make a trial design report","title":"Basic Workflow","text":"creating trial design can download trial report serves guide implementing trial well reminder equipment sizes, plot specifications, treatment levels chosen. report saved html document named “trial_design_report.html”. Along basic information design (total amount inputs applied, number replicates treatment level, plot size, etc.), report also contains figures displaying provided ab-lines machines line inside trial plots.","code":"make_trial_report(   td = trial_design,   folder_path = getwd() )"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V0-basic-work-flow.html","id":"write-the-trial-design-files-for-implementation","dir":"Articles","previous_headings":"","what":"Write the trial design files for implementation","title":"Basic Workflow","text":"satisfied trial design location ab-lines, can write necessary files shape files machine operators actually implement trial. , shape files (trial dsign, applicator/planter ab-line, harvester ab-line) packed zipped folder, named “td-collection.zip”.","code":"write_trial_files(td, folder_path = getwd(), zip = TRUE, zip_name = \"td-collection\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V1-trial-design-options.html","id":"latin-square-ls","dir":"Articles","previous_headings":"","what":"Latin Square (“ls”)","title":"Trial Design Options","text":"default, design_type = \"ls\" produces.  Note trial design produced assign_rates() randomly picked pool candidate Latin Square designs. like reproduce trial design later, can use set.seed().  However, can customize spatial pattern input rate design_type = \"ls\" using rank_seq_ws rank_seq_as options. , important understand plot_id strip_id assigned plots. maps.  can see, plot_id unique numeric identifier assigned plots within strip. , multiple plots plot_id values, combination strip_id plot_id uniquely identifies plot. rank_seq_ws option specifies order rate rankings repetead withing strip (_ws end function). Suppose rank_seq_ws = c(5, 4, 3, 2, 1). 5 refers 5th-ranked (highest) rate, 260 rates = c(100, 140, 180, 220, 260) . 1 refers first-ranked (lowest) rate, 100. Rates assigned order plots within strip. rank_seq_as option specifies order rate rankings first plot strip across strips. , example, rank_seq_as = c(1, 4, 3, 2, 5), first plot (plot_id == 1) first strip (strip_id == 1) assigned rate rank 1. first plot 5th strip ((strip_id == 5)) assigned rate rank 5. sequence repeated first plot strips assigned rate rank. Now, given strip, rate ranks specified rank_seq_ws repeated starting rate rank first plot. example, first plot 3rd strip rate rank 3 (, 180). means code go rest rate ranks rank_seq_ws (2 1), go back beginning rank_seq_ws, 5. , third strip, rate rank plots look like . Let’s try examples.","code":"n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 140, 180, 220, 260),     design_type = \"ls\"   )  td_ls_d <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_ls_d) set.seed(89934)  td_ls_d <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_ls_d) ggpubr::ggarrange(   viz(td_ls_d, type = \"strip_id\"),   viz(td_ls_d, type = \"plot_id\"),   ncol = 2 ) rank_seq_ws <- c(5, 4, 3, 2, 1)  data.frame(   plot_id = 1:10,   rate_rank = c(3, 2, 1, rank_seq_ws, rank_seq_ws[1:2]) ) #>    plot_id rate_rank #> 1        1         3 #> 2        2         2 #> 3        3         1 #> 4        4         5 #> 5        5         4 #> 6        6         3 #> 7        7         2 #> 8        8         1 #> 9        9         5 #> 10      10         4 n_rate_info$rank_seq_ws <- list(c(1, 2, 3, 4, 5)) n_rate_info$rank_seq_as <- list(c(1, 2, 3, 4, 5))  td_ls_1 <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_ls_1, type = \"rates\") n_rate_info$rank_seq_ws <- list(c(5, 2, 4, 1, 3)) n_rate_info$rank_seq_as <- list(c(1, 5, 2, 4, 3))  td_ls_2 <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_ls_2, type = \"rates\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V1-trial-design-options.html","id":"strip-trial-str","dir":"Articles","previous_headings":"","what":"Strip trial (“str”)","title":"Trial Design Options","text":"can design strip trial using design_type = \"str\". default, repeates sequence rates like .  Just like “ls” option, can specify spatial pattern strip rates using rank_seq_as option. code repeats 100 (rank 1), 280 (rank 4), 220 (rank 3), 160 (rank 2). Since strip trial single rate per strip, rank_seq_ws available unlike design_type = \"ls\".  strip trial, can specify full sequence unlike design options. total 19 strips experiment. Let’s provide vector length 19 rank_seq_as.","code":"n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 160, 220, 280),     design_type = \"str\",   )  td_strip <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_strip, type = \"rates\") n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 160, 220, 280),     rank_seq_as = c(1, 4, 3, 2),     design_type = \"str\",   )  td_strip <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_strip, type = \"rates\") #--- total number of strips ---# max(exp_data$exp_plots[[1]]$strip_id) #> [1] 19 n_rate_info$rank_seq_as <- list(c(1, 4, 3, 2, 2, 3, 4, 1, 3, 2, 1, 4, 2, 3, 1, 4, 4, 2, 3))  td_strip <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_strip, type = \"rates\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V1-trial-design-options.html","id":"randomized-strip-rstr","dir":"Articles","previous_headings":"","what":"Randomized Strip (“rstr”)","title":"Trial Design Options","text":"can create randomized strip design using “rstr” option follows.  design completely randomized. Rather randomized inside block strips. , block consists four consecutive strips four distinct rates provided user.","code":"set.seed(329544) n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 160, 220, 280),     design_type = \"rstr\",   )  td_randomized_strip <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_randomized_strip, type = \"rates\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V1-trial-design-options.html","id":"randomized-block-rb","dir":"Articles","previous_headings":"","what":"Randomized Block (“rb”)","title":"Trial Design Options","text":"can crete randomized block design using \"rb\" option.  design_type = \"rb\", blocks created internally assign_rates() run. blocks look like.  Since five distinctive rates, block consists five five plots. block, five rates randomly assigned way rates appear exactly five times.","code":"n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 140, 180, 220, 260),     design_type = \"rb\",   )  td_rb <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_rb, type = \"rates\") add_blocks(td_rb) %>% viz(type = \"block_id\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V1-trial-design-options.html","id":"extra-jump-conscious-alternate-ejca","dir":"Articles","previous_headings":"","what":"Extra Jump-conscious Alternate (“ejca”)","title":"Trial Design Options","text":"design alternate high-rate strip low-rate strip, thus avoiding sudden changes input rates machines can handle . EJCA machine friendly JCLS.","code":"n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 140, 180, 220, 260, 300),     design_type = \"ejca\",   )  td_ejca <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_ejca, type = \"rates\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V1-trial-design-options.html","id":"sparse-sparse","dir":"Articles","previous_headings":"","what":"Sparse (“sparse”)","title":"Trial Design Options","text":"Sparse design \"sparse\" option generate trial design every experimental plot status-quo rate (business--usual rate). can potentially alleviate yield loss associated lower rates compared designs lower rates happen less frequently.","code":"n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 140, 180, 220, 260, 300),     design_type = \"sparse\",   )  td_sparse <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td_sparse, type = \"rates\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V3-change-rates-manually.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Change Trial Rates Manually","text":"Let’s first create trial design single input case. trial design looks like.","code":"n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 30,     section_num = 1,     harvester_width = 20,     headland_length = 30,     side_length = 60   )  exp_data <-   make_exp_plots(     input_plot_info = n_plot_info,     boundary_data = system.file(\"extdata\", \"boundary-simple1.shp\", package = \"ofpetrial\"),     abline_data = system.file(\"extdata\", \"ab-line-simple1.shp\", package = \"ofpetrial\"),     abline_type = \"free\"   ) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `experiment_plots_dissolved = list(...)`. #> ℹ In row 1. #> Caused by warning: #> ! package 'sf' was built under R version 4.2.3  n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 140, 180, 220, 260),     design_type = \"ls\",     rank_seq_ws = c(1, 2, 3, 4, 5),     rank_seq_as = c(1, 2, 3, 4, 5)   )  td <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   ) viz(td, type = \"rates\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V3-change-rates-manually.html","id":"changing-rates","dir":"Articles","previous_headings":"","what":"Changing rates","title":"Change Trial Rates Manually","text":"important aware every single plot assigned withint-strip plot id strip id created using make_exp_plots(). figure shows strip id associated plot.  figure shows plot id associated plot.  can see, plot_id unique numeric identifier assigned plots within strip. , multiple plots plot_id values, combination strip_id plot_id uniquely identifies plot.","code":"td$trial_design[[1]] #> Simple feature collection with 191 features and 4 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -16.70078 ymin: 39.11957 xmax: -16.69604 ymax: 39.12696 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    rate strip_id plot_id       type                       geometry #> 1   100        1       1 experiment POLYGON ((-16.6964 39.11976... #> 2   140        1       2 experiment POLYGON ((-16.6964 39.12047... #> 3   180        1       3 experiment POLYGON ((-16.6964 39.12118... #> 4   220        1       4 experiment POLYGON ((-16.6964 39.12189... #> 5   260        1       5 experiment POLYGON ((-16.6964 39.1226,... #> 6   100        1       6 experiment POLYGON ((-16.6964 39.12331... #> 7   140        1       7 experiment POLYGON ((-16.6964 39.12402... #> 8   180        1       8 experiment POLYGON ((-16.69641 39.1247... #> 9   220        1       9 experiment POLYGON ((-16.69641 39.1254... #> 10  260        1      10 experiment POLYGON ((-16.69641 39.1261... viz(td, type = \"strip_id\") #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_text()`). viz(td, type = \"plot_id\") #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"https://difm-brain.github.io/ofpetrial/articles/V3-change-rates-manually.html","id":"re-assign-a-single-rate-to-all-the-specified-plots","dir":"Articles","previous_headings":"Changing rates","what":"Re-assign a single rate to all the specified plots","title":"Change Trial Rates Manually","text":"can use change_rates() change rates. code change rate asscociated plot strip_id = 1 plot_id = 1 (left bottom cell) 0.  can change rates multiple plots plot_id across multiple strip_ids.  give vectors values stip_ids plot_ids, plots possible combinations strip_id-plot_id going new rate.  provide plot_ids, plots strips specified strip_ids altered.","code":"modified_td <-   change_rates(     td = td,     input_name = \"NH3\",     strip_ids = 1,     plot_ids = 1,     new_rates = 0   ) viz(modified_td, type = \"rates\") change_rates(   td,   input_name = \"NH3\",   strip_ids = 1:10,   plot_ids = 10,   new_rates = 0 ) %>%   viz(abline = FALSE) change_rates(   td,   input_name = \"NH3\",   strip_ids = 1:10,   plot_ids = c(1, 5, 9, 14, 19, 24),   new_rates = 0 ) %>%   viz(abline = FALSE) change_rates(   td,   input_name = \"NH3\",   strip_ids = c(1, 4, 7, 10, 13, 16),   new_rates = 0 ) %>%   viz(abline = FALSE)"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V3-change-rates-manually.html","id":"re-assign-multiple-rates-by-strip","dir":"Articles","previous_headings":"Changing rates","what":"Re-assign multiple rates by strip","title":"Change Trial Rates Manually","text":"can also change rate multiple plots across multiple strips strip using rate_by = \"strip\" option. case, nth element new_rates assigned nth strip strip_ids.  leave plot_ids unspecified, plots strips specified strip_ids assigned new rates. , rates re-assigned strip.  rate_by = \"strip\" can useful want “remove” plots experiment. example, take look trial design.  Notice three-plot strip east end field. Suppose, like “remove” experiments (nothing wrong keeping part experiment). can assining rate non-experimental part field (180) strip.","code":"change_rates(   td,   input_name = \"NH3\",   strip_ids = 2:7,   plot_ids = 3:8,   new_rates = c(0, 300, 0, 300, 0, 300),   rate_by = \"strip\" ) %>%   viz(abline = FALSE) change_rates(   td,   input_name = \"NH3\",   strip_ids = 2:7,   new_rates = c(0, 300, 150, 200, 100, 300),   rate_by = \"strip\" ) %>%   viz(abline = FALSE) data(td_curved) viz(td_curved) change_rates(   td_curved,   input_name = \"NH3\",   strip_ids = 31,   new_rates = 180,   rate_by = \"strip\" ) %>%   viz(abline = FALSE)"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V3-change-rates-manually.html","id":"re-assign-multiple-rates-by-plot","dir":"Articles","previous_headings":"Changing rates","what":"Re-assign multiple rates by plot","title":"Change Trial Rates Manually","text":"can assign new rates plot plot one time using rate_by = \"plot\" option. option, asked provide matrix rates rows columns matrix represents plot_ids strip_ids, respectively. example, suppose plot_ids = c(2, 4, 6) strip_ids = c(1, 3, 5, 7). suppose, specified new_rates like . , plot plot_id = 2 (1st element plot_ids) strip_id = 1 (1st element strip_ids) get value stored new_rates[1, 1] (1st row 1st column matrix rates). code assign randomized rates 5-plot 5-plot block left lower corner field.  like, repeat blocks plots generate randomized block design. course, much easier just use “rb” option assign_rates().","code":"(   new_rates <- matrix(1:12 * 20, nrow = 3, ncol = 4) ) #>      [,1] [,2] [,3] [,4] #> [1,]   20   80  140  200 #> [2,]   40  100  160  220 #> [3,]   60  120  180  240 new_rates_mat <- replicate(5, sample(c(100, 140, 180, 220, 260), 5))  change_rates(   td,   input_name = \"NH3\",   strip_ids = 1:5,   plot_ids = 1:5,   new_rates = new_rates_mat,   rate_by = \"plot\" ) %>%   viz(abline = FALSE)"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V3-change-rates-manually.html","id":"application-precision-nitrogen-project-pnp-at-university-of-nebraska-lincoln","dir":"Articles","previous_headings":"","what":"Application: Precision Nitrogen Project (PNP) at University of Nebraska Lincoln","title":"Change Trial Rates Manually","text":", apply learned far create trial design like ones used Puntel, Thompson, Mieno (2024).","code":"n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 60,     section_num = 1,     harvester_width = 30,     headland_length = 30,     plot_width = 60,     min_plot_length = 200,     max_plot_length = 300   ) #>   exp_data <-   make_exp_plots(     input_plot_info = n_plot_info,     boundary_data = system.file(\"extdata\", \"boundary-simple1.shp\", package = \"ofpetrial\"),     abline_data = system.file(\"extdata\", \"ab-line-simple1.shp\", package = \"ofpetrial\"),     abline_type = \"free\"   )  viz(exp_data, type = \"layout\") n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 240,     unit = \"lb\",     rates = 240,     design_type = \"str\"   )  td <-   assign_rates(     exp_data = exp_data,     rate_info = n_rate_info   )  viz(td, type = \"rates\") td <-   change_rates(     td,     strip_ids = c(3, 6),     new_rates = 180   )  viz(td, type = \"rates\") td <-   td %>%   change_rates(     strip_ids = 8:12,     plot_ids = 5:9,     new_rates = c(100, 140, 180, 220, 260),     rate_by = \"strip\"   ) %>%   change_rates(     strip_ids = 8:12,     plot_ids = 15:19,     new_rates = c(140, 260, 100, 180, 220),     rate_by = \"strip\"   ) %>%   change_rates(     strip_ids = 8:12,     plot_ids = 25:29,     new_rates = c(220, 100, 260, 220, 180),     rate_by = \"strip\"   )  viz(td, type = \"rates\") td <-   change_rates(     td,     strip_ids = c(15, 16),     new_rates = 180   )  viz(td, type = \"rates\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V4-diagnose-td.html","id":"check-the-alignment-of-the-harvester-and-applicatorplanter","dir":"Articles","previous_headings":"","what":"Check the alignment of the harvester and applicator/planter","title":"Diagnose Trial Designs","text":"ideal yield data points associated single input rate. However, achieved sometimes width machine multiple machines. case, mixed treatment problem data points associated one input rates. check_alignment() function checks alignment harvester applicator/planter quantify visualize degree mixed treatment problems trial design. Let’s first create experiment plots plot width specified 90 feet, twice wide applicator nitrogen fertilizer three times wide harvesters. Running check_alignment() exp_data, One elements resulting output g_path_alignment, ggplot figure path harvester (red) applicator (blue).  can see, three yield paths fit perfectly single applicator path. , mixed treatment problem layout experiment plots. g_overlap element ggplot figure histogram highest percentage harvester strip area occupied single rate. trial design, since strips single input rate, 45 strips value 100%.  Now, let’s make plot width 45 feet. can see , every three harvester paths associated two input rates.  can confirmed following figure, shows third harvester strips 50% mix.  see kind problem, reconsider changing plot width, unless avoidable. sure right plot width , might advisable leave plot_width unspecified (plot_width = NA) prep_plot() function, case, package automatically suggest appropriate (may optimal) plot width.","code":"n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 45,     section_num = 1,     harvester_width = 30,     plot_width = 90   ) #>   exp_data <-   make_exp_plots(     input_plot_info = n_plot_info,     boundary_data = boundary_file,     abline_data = abline_file,     abline_type = \"free\"   ) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `experiment_plots_dissolved = list(...)`. #> ℹ In row 1. #> Caused by warning: #> ! package 'sf' was built under R version 4.2.3 (   machine_alignment_check <- check_alignment(exp_data) ) #> # A tibble: 1 × 6 #>   input_name                      harvest_ab_line overlap_data  harvester_path #>   <chr>                          <LINESTRING [m]> <list>        <list>         #> 1 NH3        (353348.8 4331408, 353360.2 4332051) <dt [39 × 7]> <sf [45 × 3]>  #> # ℹ 2 more variables: g_path_alignment <list>, g_overlap <list> machine_alignment_check$g_path_alignment #> [[1]] machine_alignment_check$g_overlap #> [[1]] #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_bar()`). n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 45,     section_num = 1,     harvester_width = 30,     plot_width = 45   ) #> For NH3, the plot width you specified would cause mixed treatment problems. However, there is a plot width that avoids them. It is suggested that you use 90 as the plot width.  exp_data <-   make_exp_plots(     input_plot_info = n_plot_info,     boundary_data = boundary_file,     abline_data = abline_file,     abline_type = \"free\"   )  #--- check alignment ---# machine_alignment_check <- check_alignment(exp_data) machine_alignment_check$g_path_alignment #> [[1]] machine_alignment_check$g_overlap #> [[1]] #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_bar()`)."},{"path":"https://difm-brain.github.io/ofpetrial/articles/V4-diagnose-td.html","id":"check-the-correlation-of-the-input-rates-for-a-two-input-experiment","dir":"Articles","previous_headings":"","what":"Check the correlation of the input rates for a two-input experiment","title":"Diagnose Trial Designs","text":"Suppose running two-input experiment. High correlation two input rates avoided hurt statistical efficiency, rendering estimation individual impact two inputs inaccurate. available pre-made trial design options ofpetrial packge designed avoid problem. However, assign rates using rank_seq_ws rank_seq_as options ls design type, may accidentally create trial design two input rates highly correlated. example. first create experiment plots. Note plot_width inputs . Now, assign rates inputs using rank_seq_ws rank_seq_as. visualization assigned rates inputs. easy see input exactly pattern rank_seq_ws plot_width.  can check correlation two inputs using check_ortho_inputs() like . can see, extremely highly correlated. see , reassign rates one inputs. Now, let’s change width plots NH3 60 feet, twice wide seed. use rate information assign rates new experiment plots.  Now, two plots different rates seed single plot NH3. Consequently, correlation low now. Now, let’s think case randomized block design used inputs1 using plot width inputs just like first case. Now, assign rates inputs using randomized block design (rb). Since rates randomly assigned block inputs, cases introduce higher correlation others. first case correlation -0.1046302, second case 0.0239586.","code":"seed_plot_info <-   prep_plot(     input_name = \"seed\",     unit_system = \"imperial\",     machine_width = 60,     section_num = 24,     harvester_width = 30,     plot_width = 30   ) #>   n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 30,     section_num = 1,     harvester_width = 30,     plot_width = 30   ) #>   exp_data <-   make_exp_plots(     input_plot_info = list(seed_plot_info, n_plot_info),     boundary_data = boundary_file,     abline_data = abline_file,     abline_type = \"free\"   ) seed_rate_info <-   prep_rate(     plot_info = seed_plot_info,     gc_rate = 32000,     unit = \"seed\",     min_rate = 16000,     max_rate = 40000,     num_rates = 5,     design_type = \"ls\",     rank_seq_ws = c(5, 4, 3, 2, 1),     rank_seq_as = c(5, 1, 4, 2, 3)   ) #> Trial rates were not directly specified via the {rates} option, so the trial rates will be calculated using min_rate, max_rate, gc_rate, and num_rates  n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 140, 180, 220, 260),     design_type = \"ls\",     rank_seq_ws = c(5, 4, 3, 2, 1),     rank_seq_as = c(5, 1, 4, 2, 3)   )  td_two_input <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info)) #> You specified either rank_seq_ws and/or rank_seq_as for at least one of the inputs and the two trial designs are created independently without any consideration for even number of replications and balanced spatial distribution of the joint rate combinations to respect the specified rank sequence(s). Please use ofpetrial::make_trial_report() to check these aspected of the trial designs created. You could alternatively leave those arguments empty, and then the code will generate trial designs that are free of the above problems. viz(td_two_input) check_ortho_inputs(td_two_input) #> Checking the correlation between the two inputs. This may take some time depending on the number of experiment plots. #> [1] 0.995879 #++++++++++++++++++++++++++++++++++++ #+ change the plot width for NH3 #++++++++++++++++++++++++++++++++++++ n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 60,     section_num = 1,     harvester_width = 30,     plot_width = 60   ) #>   #++++++++++++++++++++++++++++++++++++ #+ Recreate experient plots for NH3 #++++++++++++++++++++++++++++++++++++ exp_data <-   make_exp_plots(     input_plot_info = list(seed_plot_info, n_plot_info),     boundary_data = boundary_file,     abline_data = abline_file,     abline_type = \"free\"   )  #++++++++++++++++++++++++++++++++++++ #+ Assign rates again with the same rate information #++++++++++++++++++++++++++++++++++++ td_two_input_2 <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info)) #> Minimum number of treatment replications is less than or equal to 4. Please consider reducing the number of treatment levels or designing a one input trial. viz(td_two_input_2) check_ortho_inputs(td_two_input_2) #> Checking the correlation between the two inputs. This may take some time depending on the number of experiment plots. #> [1] 0.06877089 n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 30,     section_num = 1,     harvester_width = 30,     plot_width = 30   ) #>   exp_data <-   make_exp_plots(     input_plot_info = list(seed_plot_info, n_plot_info),     boundary_data = boundary_file,     abline_data = abline_file,     abline_type = \"free\"   ) seed_rate_info <-   prep_rate(     plot_info = seed_plot_info,     gc_rate = 32000,     unit = \"seed\",     min_rate = 16000,     max_rate = 40000,     num_rates = 5,     design_type = \"rb\"   ) #> Trial rates were not directly specified via the {rates} option, so the trial rates will be calculated using min_rate, max_rate, gc_rate, and num_rates  n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 140, 180, 220, 260),     design_type = \"rb\"   ) #--- case 1 ---# set.seed(543) td_two_input_rb_1 <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info)) cor_case_1 <- check_ortho_inputs(td_two_input_rb_1) cor_case_1 #> [1] -0.1046302 #--- case 2 ---# set.seed(383543) td_two_input_rb_2 <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info)) cor_case_2 <- check_ortho_inputs(td_two_input_rb_2) cor_case_2 #> [1] 0.02395857"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V4-diagnose-td.html","id":"check-the-correlation-of-the-input-rates-with-observed-fieldtopographic-characteristics","dir":"Articles","previous_headings":"","what":"Check the correlation of the input rates with observed field/topographic characteristics","title":"Diagnose Trial Designs","text":"analyzing experiment data applying statistical methods estimate yield response functions, field topographic characteristics often included model control effects, help isolate impact input yield. designing experiments, nice input rates uncorrelated (orthogonal ) observed characteristics. check_ortho_with_chars() checks . Let’s first import already-design trial design called td_single_input. visualization trial desing.  , three sets spatial data want check. Past yield data (Yld_Vol_Dr) field (points data) clay content (clay) soil category (mukey) Slope (slope) field (raster data) Topographic Wetness Index (twi) field (raster data) Yield data  SSURGO   Slope TWI","code":"data(td_single_input) viz(td_single_input) yield_sf <- sf::st_read(system.file(\"extdata\", \"yield-simple1.shp\", package = \"ofpetrial\")) #> Reading layer `yield-simple1' from data source  #>   `/private/var/folders/t4/5gnqprbn38nftyxkyk5hdwmd8hnypy/T/RtmpouX0en/temp_libpath13a241568fe7b/ofpetrial/extdata/yield-simple1.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 3365 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -16.70072 ymin: 39.11962 xmax: -16.69613 ymax: 39.1269 #> Geodetic CRS:  WGS 84  ggplot(yield_sf) +   geom_sf(aes(color = Yld_Vol_Dr)) +   scale_color_viridis_c() +   theme_void() ssurgo_sf <-   sf::st_read(system.file(\"extdata\", \"ssurgo-simple1.shp\", package = \"ofpetrial\")) %>%   dplyr::mutate(mukey = factor(mukey)) #> Reading layer `ssurgo-simple1' from data source  #>   `/private/var/folders/t4/5gnqprbn38nftyxkyk5hdwmd8hnypy/T/RtmpouX0en/temp_libpath13a241568fe7b/ofpetrial/extdata/ssurgo-simple1.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 11 features and 9 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -16.70096 ymin: 39.11957 xmax: -16.69587 ymax: 39.12696 #> Geodetic CRS:  WGS 84  ggplot(ssurgo_sf) +   geom_sf(aes(fill = mukey)) +   theme_void() ggplot(ssurgo_sf) +   geom_sf(aes(fill = clay)) +   scale_fill_viridis_c() +   theme_void() topo_rast <-   c(     terra::rast(system.file(\"extdata\", \"slope.tif\", package = \"ofpetrial\")),     terra::rast(system.file(\"extdata\", \"twi.tif\", package = \"ofpetrial\"))   )  plot(topo_rast) checks <-   check_ortho_with_chars(     td = td_single_input,     sp_data_list = list(yield_sf, ssurgo_sf, topo_rast),     vars_list = list(\"Yld_Vol_Dr\", c(\"mukey\", \"clay\"), names(topo_rast))   ) #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `checks = purrr::pmap(list(trial_design, spatial_data, #>   variable), summarize_chars)`. #> Caused by warning: #> ! Computation failed in `stat_bin()`. #> Caused by error in `abs()`: #> ! non-numeric argument to mathematical function checks$summary_data[[1]] #>          var cor_with_rate #> 1 Yld_Vol_Dr    0.02789165 checks$summary_fig[[1]]"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V6-non-regular-field.html","id":"when-the-field-is-curved","dir":"Articles","previous_headings":"","what":"When the field is curved","title":"Non-regular fields","text":"field curved, make_exp_plots() makes effort keep length plots across strips . Rather, find best plot width within [min_plot_width, max_plot_width] makes use available space. Also, make_exp_plots() try start strips bottom line first plots lined stratight. Consequently, field curved, experiment plots look like .  kind spatial arrangement experiment plots, blocks can shaped rectangular simply impossible define regular rectangular blocks. 5 5 blocks look like field try assign blocks regardless.   means designing trial using randomized block design type field may produce design might intended.","code":"n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 30,     section_num = 1,     harvester_width = 20,     headland_length = 30,     side_length = 60   )  exp_data <-   make_exp_plots(     input_plot_info = n_plot_info,     boundary_data = system.file(\"extdata\", \"boundary-irregular1.shp\", package = \"ofpetrial\"),     abline_data = system.file(\"extdata\", \"ab-line-irregular1.shp\", package = \"ofpetrial\"),     abline_type = \"free\"   ) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `experiment_plots_dissolved = list(...)`. #> ℹ In row 1. #> Caused by warning: #> ! package 'sf' was built under R version 4.2.3  viz(exp_data, type = \"layout\") #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"https://difm-brain.github.io/ofpetrial/articles/V6-non-regular-field.html","id":"field-with-ditches-and-holes","dir":"Articles","previous_headings":"","what":"Field with ditches and holes","title":"Non-regular fields","text":"often , fields ditches (parts crops grown). make_exp_plots() function avoids areas automatically creating experiment plots like :","code":"n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 30,     section_num = 1,     harvester_width = 20,     headland_length = 30,     side_length = 60,     min_plot_length = 250   )  exp_data <-   make_exp_plots(     input_plot_info = n_plot_info,     boundary_data = system.file(\"extdata\", \"field_boundary_with_holes.shp\", package = \"ofpetrial\"),     abline_data = system.file(\"extdata\", \"ab_line_for_field_with_holes.shp\", package = \"ofpetrial\")   )  viz(exp_data, type = \"layout\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V7-visualize-from-scratch.html","id":"modify-the-map-created-by-viz","dir":"Articles","previous_headings":"","what":"Modify the map created by viz()","title":"Modify trial design maps or make them from scratch","text":"running viz() displays plot, can save new object like . can see, ggplot object. means can example change fill color scheme viridis like (along change title):","code":"#--- save it to a new object ---# viz_td <- viz(td)  #--- check its class ---# class(viz_td) #> [1] \"gg\"     \"ggplot\" viz_td +   scale_fill_viridis_d(name = \"NH3 (lb/ac)| N Equivalent (lb/ac)\") +   ggtitle(\"New Title\")"},{"path":"https://difm-brain.github.io/ofpetrial/articles/V7-visualize-from-scratch.html","id":"create-a-trial-design-map-from-scratch","dir":"Articles","previous_headings":"","what":"Create a trial design map from scratch","title":"Modify trial design maps or make them from scratch","text":"viz() uses trail design sf object stored td (trial design created using assign_rates()), named trial_design. can access like : , can use ggplot2 package (pacakges like tmap) create maps .  ggplot2 guideline. , stop . , clear point can modify map liking using ggplot2.","code":"#--- extract the trial design sf ---# td_for_plot <- td$trial_design[[1]]  #--- check the class ---# class(td_for_plot) #> [1] \"sf\"         \"data.table\" \"data.frame\" ggplot(data = td_for_plot) +   geom_sf(aes(fill = factor(rate)))"},{"path":[]},{"path":"https://difm-brain.github.io/ofpetrial/articles/basic-work-flow.html","id":"prepare-plot-information-for-the-inputs","dir":"Articles","previous_headings":"Create experimental plots","what":"Prepare plot information for the inputs","title":"Basic Workflow","text":"start specifying plot machine information inputs using prep_plot, simply creates data.frame specified information internal unit conversion length (e.g., feet meter).","code":"#--- for nitrogen ---# n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 30,     section_num = 1,     harvester_width = 30,     plot_width = 30   ) #>   dplyr::glimpse(n_plot_info) #> Rows: 1 #> Columns: 11 #> $ input_name      <chr> \"NH3\" #> $ unit_system     <chr> \"imperial\" #> $ machine_width   <dbl> 9.144 #> $ section_num     <dbl> 1 #> $ section_width   <dbl> 9.144 #> $ harvester_width <dbl> 9.144 #> $ plot_width      <dbl> 9.144 #> $ headland_length <dbl> 18.288 #> $ side_length     <dbl> 9.144 #> $ min_plot_length <dbl> 73.152 #> $ max_plot_length <dbl> 91.44  #--- for seed ---# seed_plot_info <-   prep_plot(     input_name = \"seed\",     unit_system = \"imperial\",     machine_width = 60,     section_num = 24,     harvester_width = 30,     plot_width = 30   ) #>   dplyr::glimpse(seed_plot_info) #> Rows: 1 #> Columns: 11 #> $ input_name      <chr> \"seed\" #> $ unit_system     <chr> \"imperial\" #> $ machine_width   <dbl> 18.288 #> $ section_num     <dbl> 24 #> $ section_width   <dbl> 0.762 #> $ harvester_width <dbl> 9.144 #> $ plot_width      <dbl> 9.144 #> $ headland_length <dbl> 36.576 #> $ side_length     <dbl> 9.144 #> $ min_plot_length <dbl> 73.152 #> $ max_plot_length <dbl> 91.44"},{"path":"https://difm-brain.github.io/ofpetrial/articles/basic-work-flow.html","id":"create-experimental-plots-1","dir":"Articles","previous_headings":"Create experimental plots","what":"Create experimental plots","title":"Basic Workflow","text":"Now plot machine specifications inputs ready, can create experiment plots based using make_exp_plots(). Since two-input case, create list plot information provided make_exp_plots() along path field boudary ab-line files (can alternatively provide data sf objects.). experiment plots created make_exp_plots() stored exp_plots. exp_data$exp_plots list experimental plots sf. first element nitrogen second seed following order information provided input_plot_info. can access individual experiment plots (sf object) like . can visualize layout experiment plots using viz() type = \"layout\" option.  can see, ab-lines applicator/planter harvester generated input. show export ab-lines later.","code":"input_plot_info <- list(n_plot_info, seed_plot_info)  exp_data <-   make_exp_plots(     input_plot_info = input_plot_info,     boundary_data = system.file(\"extdata\", \"boundary-simple1.shp\", package = \"ofpetrial\"),     abline_data = system.file(\"extdata\", \"ab-line-simple1.shp\", package = \"ofpetrial\"),     abline_type = \"free\"   ) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `experiment_plots_dissolved = list(...)`. #> ℹ In row 1. #> Caused by warning: #> ! package 'sf' was built under R version 4.2.3 exp_data$exp_plots #> [[1]] #> Simple feature collection with 369 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 352988.4 ymin: 4331460 xmax: 353376.6 ymax: 4332198 #> Projected CRS: WGS 84 / UTM zone 28N #> First 10 features: #>    plot_id poly_line strip_id                       geometry #> 1        1       1_1        1 POLYGON ((353363.5 4331465,... #> 2        2       1_1        1 POLYGON ((353364.9 4331546,... #> 3        3       1_1        1 POLYGON ((353366.4 4331628,... #> 4        4       1_1        1 POLYGON ((353367.9 4331709,... #> 5        5       1_1        1 POLYGON ((353369.3 4331791,... #> 6        6       1_1        1 POLYGON ((353370.8 4331872,... #> 7        7       1_1        1 POLYGON ((353372.2 4331953,... #> 8        8       1_1        1 POLYGON ((353373.7 4332035,... #> 9        9       1_1        1 POLYGON ((353375.1 4332116,... #> 10       1       1_1        2 POLYGON ((353354.3 4331465,... #>  #> [[2]] #> Simple feature collection with 369 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 352988.4 ymin: 4331460 xmax: 353376.6 ymax: 4332198 #> Projected CRS: WGS 84 / UTM zone 28N #> First 10 features: #>    plot_id poly_line strip_id                       geometry #> 1        1       1_1        1 POLYGON ((353363.5 4331465,... #> 2        2       1_1        1 POLYGON ((353364.9 4331546,... #> 3        3       1_1        1 POLYGON ((353366.4 4331628,... #> 4        4       1_1        1 POLYGON ((353367.9 4331709,... #> 5        5       1_1        1 POLYGON ((353369.3 4331791,... #> 6        6       1_1        1 POLYGON ((353370.8 4331872,... #> 7        7       1_1        1 POLYGON ((353372.2 4331953,... #> 8        8       1_1        1 POLYGON ((353373.7 4332035,... #> 9        9       1_1        1 POLYGON ((353375.1 4332116,... #> 10       1       1_1        2 POLYGON ((353354.3 4331465,... exp_data$exp_plots[[1]] #> Simple feature collection with 369 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 352988.4 ymin: 4331460 xmax: 353376.6 ymax: 4332198 #> Projected CRS: WGS 84 / UTM zone 28N #> First 10 features: #>    plot_id poly_line strip_id                       geometry #> 1        1       1_1        1 POLYGON ((353363.5 4331465,... #> 2        2       1_1        1 POLYGON ((353364.9 4331546,... #> 3        3       1_1        1 POLYGON ((353366.4 4331628,... #> 4        4       1_1        1 POLYGON ((353367.9 4331709,... #> 5        5       1_1        1 POLYGON ((353369.3 4331791,... #> 6        6       1_1        1 POLYGON ((353370.8 4331872,... #> 7        7       1_1        1 POLYGON ((353372.2 4331953,... #> 8        8       1_1        1 POLYGON ((353373.7 4332035,... #> 9        9       1_1        1 POLYGON ((353375.1 4332116,... #> 10       1       1_1        2 POLYGON ((353354.3 4331465,... viz(exp_data, type = \"layout\", abline = TRUE)"},{"path":"https://difm-brain.github.io/ofpetrial/articles/basic-work-flow.html","id":"assign-rates","dir":"Articles","previous_headings":"","what":"Assign rates","title":"Basic Workflow","text":"Let’s now assign input rates experimental plots just created. , need prepare rate information inputs using prep_rate(). , design_type = \"ls\" (Latin Square) used seed nitrogen experiments (see article design options article changing rates manually.).","code":""},{"path":"https://difm-brain.github.io/ofpetrial/articles/basic-work-flow.html","id":"prepare-rate-information","dir":"Articles","previous_headings":"Assign rates","what":"Prepare rate information","title":"Basic Workflow","text":"can use prep_rate() prepare rate information assigning rates experimental plots. nitrogen, exact rates specified rates option, trial design type specified “ls” (short Latin Square). seed, minimum maximum rates, number rates specified. case, code interally finds rates automatilly .","code":"#!=========================================================== # ! Assign rates # !=========================================================== n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 140, 180, 220, 260),     design_type = \"ls\",     rank_seq_ws = c(5, 4, 3, 2, 1)   )  dplyr::glimpse(n_rate_info) #> Rows: 1 #> Columns: 12 #> $ input_name          <chr> \"NH3\" #> $ design_type         <chr> \"ls\" #> $ gc_rate             <dbl> 180 #> $ unit                <chr> \"lb\" #> $ tgt_rate_original   <list> <100, 140, 180, 220, 260> #> $ tgt_rate_equiv      <list> <82.0, 114.8, 147.6, 180.4, 213.2> #> $ min_rate            <lgl> NA #> $ max_rate            <lgl> NA #> $ num_rates           <int> 5 #> $ rank_seq_ws         <list> <5, 4, 3, 2, 1> #> $ rank_seq_as         <list> <NULL> #> $ rate_jump_threshold <lgl> NA  seed_rate_info <-   prep_rate(     plot_info = seed_plot_info,     gc_rate = 32000,     unit = \"seed\",     min_rate = 16000,     max_rate = 40000,     num_rates = 4,     design_type = \"ls\"   ) #> Trial rates were not directly specified via the {rates} option, so the trial rates will be calculated using min_rate, max_rate, gc_rate, and num_rates  dplyr::glimpse(seed_rate_info) #> Rows: 1 #> Columns: 12 #> $ input_name          <chr> \"seed\" #> $ design_type         <chr> \"ls\" #> $ gc_rate             <dbl> 32000 #> $ unit                <chr> \"seed\" #> $ tgt_rate_original   <list> <16000, 24000, 32000, 40000> #> $ tgt_rate_equiv      <list> <16000, 24000, 32000, 40000> #> $ min_rate            <dbl> 16000 #> $ max_rate            <dbl> 40000 #> $ num_rates           <dbl> 4 #> $ rank_seq_ws         <list> <NULL> #> $ rank_seq_as         <list> <NULL> #> $ rate_jump_threshold <lgl> NA"},{"path":"https://difm-brain.github.io/ofpetrial/articles/basic-work-flow.html","id":"assign-rates-1","dir":"Articles","previous_headings":"Assign rates","what":"Assign rates","title":"Basic Workflow","text":"can now use assign_rates() assign rates experiment plots. visualization trial design done viz.  Along spatial pattern input rates, applicator/planter ab-line harvester ab-line drawn default.","code":"trial_design <- assign_rates(exp_data, rate_info = list(n_rate_info, seed_rate_info)) viz(trial_design, abline = TRUE)"},{"path":"https://difm-brain.github.io/ofpetrial/articles/basic-work-flow.html","id":"diagnose-the-trial-design","dir":"Articles","previous_headings":"","what":"Diagnose the trial design","title":"Basic Workflow","text":"ofpetrial package offers several functions check soundness trial design (see article details examples). , let’s check correlation seed NH3 rates. correlation coefficient 0.01, certainly acceptable.","code":"(   cor_inputs <- check_ortho_inputs(trial_design) ) #> Checking the correlation between the two inputs. This may take some time depending on the number of experiment plots. #> [1] 0.01184833"},{"path":"https://difm-brain.github.io/ofpetrial/articles/basic-work-flow.html","id":"make-a-trial-design-report","dir":"Articles","previous_headings":"","what":"Make a trial design report","title":"Basic Workflow","text":"creating trial design can download trial report serves guide implementing trial well reminder equipment sizes, plot specifications, treatment levels chosen. report saved html document named “trial_design_report.html”. Along basic information design (total amount inputs applied, number replicates treatment level, plot size, etc.), report also contains figures displaying provided ab-lines machines line inside trial plots.","code":"make_trial_report(   td = trial_design,   folder_path = getwd() )"},{"path":"https://difm-brain.github.io/ofpetrial/articles/basic-work-flow.html","id":"write-the-trial-design-files-for-implementation","dir":"Articles","previous_headings":"","what":"Write the trial design files for implementation","title":"Basic Workflow","text":"satisfied trial design location ab-lines, can write necessary files shape files machine operators actually implement trial. , shape files (trial dsign, applicator/planter ab-line, harvester ab-line) packed zipped folder, named “td-collection.zip”.","code":"write_trial_files(td, folder_path = getwd(), zip = TRUE, zip_name = \"td-collection\")"},{"path":"https://difm-brain.github.io/ofpetrial/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Taro  Mieno. Author, maintainer, copyright holder. Brittani Edge. Author, contributor.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mieno T, Edge B (2024). ofpetrial: Design -Farm Precision Field Agronomic Trials. R package version 0.1.1, https://difm-brain.github.io/ofpetrial/.","code":"@Manual{,   title = {ofpetrial: Design on-Farm Precision Field Agronomic Trials},   author = {Taro { Mieno} and Brittani Edge},   year = {2024},   note = {R package version 0.1.1},   url = {https://difm-brain.github.io/ofpetrial/}, }"},{"path":"https://difm-brain.github.io/ofpetrial/index.html","id":"ofpetrial-design-on-farm-precision-experiments","dir":"","previous_headings":"","what":"Design on-Farm Precision Field Agronomic Trials","title":"Design on-Farm Precision Field Agronomic Trials","text":"ofpetrial package allows user design agronomic input experiments reproducible manner without using ArcGIS QGIS. vignette package provides detailed guidance use package.","code":""},{"path":[]},{"path":"https://difm-brain.github.io/ofpetrial/index.html","id":"cran-version","dir":"","previous_headings":"Installation","what":"CRAN version","title":"Design on-Farm Precision Field Agronomic Trials","text":"can install CRAN version ofpetrial package.","code":"install.packages(\"ofpetrial\")"},{"path":"https://difm-brain.github.io/ofpetrial/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Design on-Farm Precision Field Agronomic Trials","text":"can install development version ofpetrial Github:","code":"devtools::install_github(\"DIFM-Brain/ofpetrial\")"},{"path":"https://difm-brain.github.io/ofpetrial/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Design on-Farm Precision Field Agronomic Trials","text":", demonstrate use ofpetrial package create single-input -farm experiment trial design (detailed instructions basic workflow provided article).","code":"library(ofpetrial)"},{"path":"https://difm-brain.github.io/ofpetrial/index.html","id":"create-experimental-plots","dir":"","previous_headings":"Example","what":"Create experimental plots","title":"Design on-Farm Precision Field Agronomic Trials","text":"start specifying plot machine information inputs using prep_plot. Now, can create experiment plots based using make_exp_plots().","code":"n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 30,     section_num = 1,     harvester_width = 30,     plot_width = 30   ) #> exp_data <-   make_exp_plots(     input_plot_info = n_plot_info,     boundary_data = system.file(\"extdata\", \"boundary-simple1.shp\", package = \"ofpetrial\"),     abline_data = system.file(\"extdata\", \"ab-line-simple1.shp\", package = \"ofpetrial\"),     abline_type = \"free\"   )  viz(exp_data, type = \"layout\", abline = TRUE)"},{"path":"https://difm-brain.github.io/ofpetrial/index.html","id":"assign-rates","dir":"","previous_headings":"Example","what":"Assign rates","title":"Design on-Farm Precision Field Agronomic Trials","text":"first prepare nitrogen rates. can now use assign_rates() assign rates experiment plots. visualization trial design done viz.  Along spatial pattern input rates, applicator/planter ab-line harvester ab-line drawn default.","code":"#!=========================================================== # ! Assign rates # !=========================================================== n_rate_info <-   prep_rate(     plot_info = n_plot_info,     gc_rate = 180,     unit = \"lb\",     rates = c(100, 140, 180, 220, 260),     design_type = \"ls\",     rank_seq_ws = c(5, 4, 3, 2, 1)   )  dplyr::glimpse(n_rate_info) #> Rows: 1 #> Columns: 12 #> $ input_name          [3m[38;5;246m<chr>[39m[23m \"NH3\" #> $ design_type         [3m[38;5;246m<chr>[39m[23m \"ls\" #> $ gc_rate             [3m[38;5;246m<dbl>[39m[23m 180 #> $ unit                [3m[38;5;246m<chr>[39m[23m \"lb\" #> $ tgt_rate_original   [3m[38;5;246m<list>[39m[23m <100, 140, 180, 220, 260> #> $ tgt_rate_equiv      [3m[38;5;246m<list>[39m[23m <82.0, 114.8, 147.6, 180.4, 213.2> #> $ min_rate            [3m[38;5;246m<lgl>[39m[23m NA #> $ max_rate            [3m[38;5;246m<lgl>[39m[23m NA #> $ num_rates           [3m[38;5;246m<int>[39m[23m 5 #> $ rank_seq_ws         [3m[38;5;246m<list>[39m[23m <5, 4, 3, 2, 1> #> $ rank_seq_as         [3m[38;5;246m<list>[39m[23m <NULL> #> $ rate_jump_threshold [3m[38;5;246m<lgl>[39m[23m NA trial_design <- assign_rates(exp_data, rate_info = n_rate_info) viz(trial_design)"},{"path":"https://difm-brain.github.io/ofpetrial/index.html","id":"write-the-trial-design-files-for-implementation","dir":"","previous_headings":"Example","what":"Write the trial design files for implementation","title":"Design on-Farm Precision Field Agronomic Trials","text":"can write trial design shape file.","code":"write_trial_files(td)"},{"path":"https://difm-brain.github.io/ofpetrial/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Design on-Farm Precision Field Agronomic Trials","text":"project funded part United States Department Agriculture—National Institute Food Agriculture (USDA—NIFA) Food Security Program Grant (Award Number 2016-68004-24769) United States Department Agriculture (USDA) -Natural Resources Conservation Service (NRCS), Commodity Credit Corporation (CCC), Conservation Innovation Grants -Farm Conservation Innovation Trials (Award Number USDA-NRCS-NHQ-CIGOFT-20-GEN0010750).","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/add_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Add blocks to trial design — add_blocks","title":"Add blocks to trial design — add_blocks","text":"Delineate blocks trial design assign block id plots","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/add_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add blocks to trial design — add_blocks","text":"","code":"add_blocks(td)"},{"path":"https://difm-brain.github.io/ofpetrial/reference/add_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add blocks to trial design — add_blocks","text":"td trial design made applying assign_rates() experimental plots made make_exp_plots()","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/add_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add blocks to trial design — add_blocks","text":"trial design block_id added","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/add_blocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add blocks to trial design — add_blocks","text":"","code":"#--- load rate information ---# data(td_single_input)  #--- add blocks ---# td_with_blocks <- add_blocks(td_single_input)  #--- take a look ---# td_with_blocks$trial_design #> [[1]] #> Simple feature collection with 191 features and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -16.70078 ymin: 39.11957 xmax: -16.69604 ymax: 39.12696 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    rate strip_id plot_id       type block_id plot_id_within_block #> 1    10        1       1 experiment        1                    1 #> 2    20        1       2 experiment        1                    2 #> 3    30        1       3 experiment        1                    3 #> 4    40        1       4 experiment        1                    4 #> 5    50        1       5 experiment        1                    5 #> 6    10        1       6 experiment        2                    1 #> 7    20        1       7 experiment        2                    2 #> 8    30        1       8 experiment        2                    3 #> 9    40        1       9 experiment        2                    4 #> 10   50        1      10 experiment        2                    5 #>                          geometry #> 1  POLYGON ((-16.70021 39.1196... #> 2  POLYGON ((-16.70021 39.1203... #> 3  POLYGON ((-16.70021 39.1210... #> 4  POLYGON ((-16.70021 39.1217... #> 5  POLYGON ((-16.70021 39.1224... #> 6  POLYGON ((-16.70021 39.1231... #> 7  POLYGON ((-16.70021 39.1238... #> 8  POLYGON ((-16.70021 39.1245... #> 9  POLYGON ((-16.70021 39.1252... #> 10 POLYGON ((-16.70021 39.126,... #>   #--- visualize ---# viz(td_with_blocks, type = \"block_id\") #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"https://difm-brain.github.io/ofpetrial/reference/assign_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign rates to the plots of experimental plots — assign_rates","title":"Assign rates to the plots of experimental plots — assign_rates","text":"functions assign input rates plots created make_exp_plots() according rate designs specified user rate_info, can created prep_rateingle().","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/assign_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign rates to the plots of experimental plots — assign_rates","text":"","code":"assign_rates(exp_data, rate_info)"},{"path":"https://difm-brain.github.io/ofpetrial/reference/assign_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign rates to the plots of experimental plots — assign_rates","text":"exp_data experiment plots created make_exp_plots() rate_info rate information created prep_rate()","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/assign_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign rates to the plots of experimental plots — assign_rates","text":"trial design sf (experiment plots rates assigned)","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/assign_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign rates to the plots of experimental plots — assign_rates","text":"","code":"#--- load experiment plots made by make_exp_plots() ---# data(exp_data) exp_data #> # A tibble: 1 × 14 #>   input_name unit_system field_sf headland exp_plots ab_lines harvest_ab_lines #>   <chr>      <chr>       <list>   <list>   <list>    <list>   <list>           #> 1 NH3        imperial    <sf>     <sf>     <sf>      <sf>     <sf [1 × 2]>     #> # ℹ 7 more variables: plot_width <dbl>, harvester_width <dbl>, #> #   machine_width <dbl>, section_num <dbl>, headland_length <dbl>, #> #   side_length <dbl>, abline_type <chr>  #--- load rate information ---# data(rate_info) rate_info #> # A tibble: 1 × 12 #>   input_name design_type gc_rate unit  tgt_rate_original tgt_rate_equiv min_rate #>   <chr>      <chr>         <dbl> <chr> <list>            <list>         <lgl>    #> 1 NH3        ls               30 gall… <dbl [5]>         <dbl [5]>      NA       #> # ℹ 5 more variables: max_rate <lgl>, num_rates <int>, rank_seq_ws <list>, #> #   rank_seq_as <list>, rate_jump_threshold <lgl>  #--- assign rates ---# td <- assign_rates(exp_data, rate_info)  #--- visualization of the assigned rates ---# viz(td)"},{"path":"https://difm-brain.github.io/ofpetrial/reference/change_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the assigned rates — change_rates","title":"Change the assigned rates — change_rates","text":"Change assigned rates plot strip","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/change_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the assigned rates — change_rates","text":"","code":"change_rates(   td,   input_name = NA,   strip_ids,   plot_ids = NULL,   new_rates,   rate_by = \"all\" )"},{"path":"https://difm-brain.github.io/ofpetrial/reference/change_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the assigned rates — change_rates","text":"td trial design input_name (character) input name strip_ids (numeric) vector strip_ids plot_ids (numeric) vector plot_ids new_rates (numeric) single numeric number `rate_by = \"\"``, vector numeric values `rate_by = \"strip\"``, matrix numeric numbers `rate_by = \"plot\"`. rate_by (character) default \"\". options \"plot\" \"strip\".","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/change_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the assigned rates — change_rates","text":"trial design changed rates","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/change_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the assigned rates — change_rates","text":"","code":"#--- load rate information ---# data(td_single_input)  #--- change rates of some strips ---# strip_ids <- 1:5 plot_ids <- 5:10 new_rates <- 200  td_modified <- change_rates(td_single_input, \"NH3\", strip_ids, plot_ids, new_rates)  #--- visualize ---# viz(td_modified)"},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_alignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the alignment of harvester and applicator/planter — check_alignment","title":"Check the alignment of harvester and applicator/planter — check_alignment","text":"Check alignment harvester applicator/planter mixed treatment problems multiple input rates associated yield monitor data","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_alignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the alignment of harvester and applicator/planter — check_alignment","text":"","code":"check_alignment(td)"},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_alignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the alignment of harvester and applicator/planter — check_alignment","text":"td trial design data created make_exp_plots() assign_rates()","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_alignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the alignment of harvester and applicator/planter — check_alignment","text":"tibble","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_alignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the alignment of harvester and applicator/planter — check_alignment","text":"","code":"#--- load trial design ---# data(td_single_input)  #--- check the alignment of harvester and applicator/planter ---# machine_alignment <- check_alignment(td_single_input)  #--- check the degree of mixed treatment problem ---# machine_alignment$overlap_data #> [[1]] #>     ha_strip_id strip_id     area  ha_area total_intersecting_ha_area #>           <int>    <int>    <num>    <num>                      <num> #>  1:           7       19 4802.257 4914.659                   4802.257 #>  2:           8       19 4802.257 4914.096                   4802.257 #>  3:           9       19 4802.257 4913.533                   4802.257 #>  4:          10       18 4800.567 4912.969                   4800.567 #>  5:          11       18 4800.567 4912.406                   4800.567 #>  6:          12       18 4800.567 4911.843                   4800.567 #>  7:          13       17 4798.877 4911.279                   4798.877 #>  8:          14       17 4798.877 4910.716                   4798.877 #>  9:          15       17 4798.877 4910.153                   4798.877 #> 10:          16       16 4797.187 4909.590                   4797.187 #> 11:          17       16 4797.187 4909.026                   4797.187 #> 12:          18       16 4797.187 4908.463                   4797.187 #> 13:          19       15 4795.497 4907.900                   4795.497 #> 14:          20       15 4795.497 4907.336                   4795.497 #> 15:          21       15 4795.497 4906.773                   4795.497 #> 16:          22       14 4793.807 4906.210                   4793.807 #> 17:          23       14 4793.807 4905.647                   4793.807 #> 18:          24       14 4793.807 4905.083                   4793.807 #> 19:          25       13 4792.117 4904.520                   4792.117 #> 20:          26       13 4792.117 4903.957                   4792.117 #> 21:          27       13 4792.117 4903.393                   4792.117 #> 22:          28       12 4790.427 4902.830                   4790.427 #> 23:          29       12 4790.427 4902.267                   4790.427 #> 24:          30       12 4790.427 4901.703                   4790.427 #> 25:          31       11 4788.737 4901.140                   4788.737 #> 26:          32       11 4788.737 4900.577                   4788.737 #> 27:          33       11 4788.737 4900.014                   4788.737 #> 28:          34       10 4779.625 4897.279                   4779.625 #> 29:          35       10 4779.625 4892.004                   4779.625 #> 30:          36       10 4779.625 4886.726                   4779.625 #> 31:          37        9 4763.788 4881.447                   4763.788 #> 32:          38        9 4763.788 4876.168                   4763.788 #> 33:          39        9 4763.788 4871.851                   4763.788 #> 34:          40        8 4756.631 4870.038                   4756.631 #> 35:          41        8 4756.631 4868.389                   4756.631 #> 36:          42        8 4756.631 4867.833                   4756.631 #> 37:          43        7 4755.824 4867.802                   4755.824 #> 38:          44        7 4755.824 4867.772                   4755.824 #> 39:          45        7 4755.824 4867.741                   4755.824 #> 40:          46        6 4755.733 4867.711                   4755.733 #> 41:          47        6 4755.733 4867.680                   4755.733 #> 42:          48        6 4755.733 4867.650                   4755.733 #> 43:          49        5 4755.641 4867.619                   4755.641 #> 44:          50        5 4755.641 4867.589                   4755.641 #> 45:          51        5 4755.641 4867.558                   4755.641 #> 46:          52        4 4755.550 4867.528                   4755.550 #> 47:          53        4 4755.550 4867.497                   4755.550 #> 48:          54        4 4755.550 4867.467                   4755.550 #> 49:          55        3 4755.458 4867.436                   4755.458 #> 50:          56        3 4755.458 4867.406                   4755.458 #> 51:          57        3 4755.458 4867.375                   4755.458 #> 52:          58        2 4755.367 4867.345                   4755.367 #> 53:          59        2 4755.367 4867.314                   4755.367 #> 54:          60        2 4755.367 4867.284                   4755.367 #> 55:          61        1 4755.275 4867.253                   4755.275 #> 56:          62        1 4755.275 4867.222                   4755.275 #> 57:          63        1 4755.275 4867.192                   4755.275 #>     ha_strip_id strip_id     area  ha_area total_intersecting_ha_area #>     intersecting_pct dominant_pct #>                <num>        <num> #>  1:        0.9771291            1 #>  2:        0.9772411            1 #>  3:        0.9773531            1 #>  4:        0.9771212            1 #>  5:        0.9772333            1 #>  6:        0.9773454            1 #>  7:        0.9771134            1 #>  8:        0.9772255            1 #>  9:        0.9773376            1 #> 10:        0.9771055            1 #> 11:        0.9772176            1 #> 12:        0.9773298            1 #> 13:        0.9770976            1 #> 14:        0.9772098            1 #> 15:        0.9773219            1 #> 16:        0.9770897            1 #> 17:        0.9772019            1 #> 18:        0.9773141            1 #> 19:        0.9770818            1 #> 20:        0.9771941            1 #> 21:        0.9773063            1 #> 22:        0.9770739            1 #> 23:        0.9771862            1 #> 24:        0.9772985            1 #> 25:        0.9770660            1 #> 26:        0.9771783            1 #> 27:        0.9772907            1 #> 28:        0.9759755            1 #> 29:        0.9770279            1 #> 30:        0.9780833            1 #> 31:        0.9758968            1 #> 32:        0.9769533            1 #> 33:        0.9778189            1 #> 34:        0.9767132            1 #> 35:        0.9770441            1 #> 36:        0.9771558            1 #> 37:        0.9769962            1 #> 38:        0.9770023            1 #> 39:        0.9770085            1 #> 40:        0.9769958            1 #> 41:        0.9770019            1 #> 42:        0.9770080            1 #> 43:        0.9769954            1 #> 44:        0.9770015            1 #> 45:        0.9770076            1 #> 46:        0.9769949            1 #> 47:        0.9770010            1 #> 48:        0.9770072            1 #> 49:        0.9769945            1 #> 50:        0.9770006            1 #> 51:        0.9770067            1 #> 52:        0.9769941            1 #> 53:        0.9770002            1 #> 54:        0.9770063            1 #> 55:        0.9769936            1 #> 56:        0.9769997            1 #> 57:        0.9770059            1 #>     intersecting_pct dominant_pct #>   #--- visualize the degree of mixed treatment problem ---# machine_alignment$g_overlap[[1]] #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_bar()`)."},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_ortho_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the correlation of the two inputs — check_ortho_inputs","title":"Check the correlation of the two inputs — check_ortho_inputs","text":"Check correlation rates two inputs two-input experiment.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_ortho_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the correlation of the two inputs — check_ortho_inputs","text":"","code":"check_ortho_inputs(td)"},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_ortho_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the correlation of the two inputs — check_ortho_inputs","text":"td trial design two-input experiment rates assigned","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_ortho_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the correlation of the two inputs — check_ortho_inputs","text":"table","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_ortho_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the correlation of the two inputs — check_ortho_inputs","text":"","code":"#--- load a trial design for a two-input experiment ---# data(td_two_input)  #--- check correlation ---# check_ortho_inputs(td_two_input) #> Checking the correlation between the two inputs. This may take some time depending on the number of experiment plots. #> [1] 0.1237254"},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_ortho_with_chars.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the orthogonality with field/topographic characteristics — check_ortho_with_chars","title":"Check the orthogonality with field/topographic characteristics — check_ortho_with_chars","text":"Check orthogonality trial input rates observed characteristics provided user","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_ortho_with_chars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the orthogonality with field/topographic characteristics — check_ortho_with_chars","text":"","code":"check_ortho_with_chars(td, sp_data_list, vars_list)"},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_ortho_with_chars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the orthogonality with field/topographic characteristics — check_ortho_with_chars","text":"td (tibble) trial design data created make_exp_plots() assign_rates() sp_data_list (list) list spatial datasets `sf` `sf` package `SpatRaster` `terra` package vars_list (list) list character vectors indicating name variables used datasets specified sp_data_list","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_ortho_with_chars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the orthogonality with field/topographic characteristics — check_ortho_with_chars","text":"list","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/check_ortho_with_chars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the orthogonality with field/topographic characteristics — check_ortho_with_chars","text":"","code":"data(td_single_input) yield_sf <- sf::st_read(system.file(\"extdata\", \"yield-simple1.shp\", package = \"ofpetrial\")) #> Reading layer `yield-simple1' from data source  #>   `/private/var/folders/t4/5gnqprbn38nftyxkyk5hdwmd8hnypy/T/RtmpouX0en/temp_libpath13a241568fe7b/ofpetrial/extdata/yield-simple1.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 3365 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -16.70072 ymin: 39.11962 xmax: -16.69613 ymax: 39.1269 #> Geodetic CRS:  WGS 84 ssurgo_sf <-   sf::st_read(system.file(\"extdata\", \"ssurgo-simple1.shp\", package = \"ofpetrial\")) %>%   dplyr::mutate(mukey = factor(mukey)) #> Reading layer `ssurgo-simple1' from data source  #>   `/private/var/folders/t4/5gnqprbn38nftyxkyk5hdwmd8hnypy/T/RtmpouX0en/temp_libpath13a241568fe7b/ofpetrial/extdata/ssurgo-simple1.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 11 features and 9 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -16.70096 ymin: 39.11957 xmax: -16.69587 ymax: 39.12696 #> Geodetic CRS:  WGS 84 topo_rast <-   c(     terra::rast(system.file(\"extdata\", \"slope.tif\", package = \"ofpetrial\")),     terra::rast(system.file(\"extdata\", \"twi.tif\", package = \"ofpetrial\"))   )  checks <-   check_ortho_with_chars(     td = td_single_input,     sp_data_list = list(yield_sf, ssurgo_sf, topo_rast),     vars_list = list(\"Yld_Vol_Dr\", c(\"mukey\", \"clay\"), names(topo_rast))   ) #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `checks = purrr::pmap(list(trial_design, spatial_data, #>   variable), summarize_chars)`. #> Caused by warning: #> ! Computation failed in `stat_bin()`. #> Caused by error in `abs()`: #> ! non-numeric argument to mathematical function  checks$summary_data[[1]] #>          var cor_with_rate #> 1 Yld_Vol_Dr    0.02789165  checks$summary_fig[[1]]"},{"path":"https://difm-brain.github.io/ofpetrial/reference/exp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Experiment data — exp_data","title":"Experiment data — exp_data","text":"Data experiment created running `make_exp_plot()` function, includes various sf objects (e.g., experiment plots, ab-line, headland, etc). data exists purpose making examples function references succinct.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/exp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Experiment data — exp_data","text":"","code":"exp_data"},{"path":"https://difm-brain.github.io/ofpetrial/reference/exp_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Experiment data — exp_data","text":"tbl_df tbl data.frame `exp_data` data frame 1 rows 9 columns: input_name input name harvester_width width harvester plot_width width plots made field_sf field boundary sf object headland headland sf object exp_plots experiment plots sf object ab_lines ab-lines applicator/planter sf object harvest_ab_lines ab-lines harvester sf object abline_type (character) one \"free\", \"lock\", \"none\" indicating way ab-line () created","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/make_exp_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Make experimental plots/strips inside the field boundary — make_exp_plots","title":"Make experimental plots/strips inside the field boundary — make_exp_plots","text":"Make experimental plots/strips inside field boundary, harvester ab-line, applicator/planter ab-line.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/make_exp_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make experimental plots/strips inside the field boundary — make_exp_plots","text":"","code":"make_exp_plots(   input_plot_info,   boundary_data,   abline_data = NA,   abline_type = \"free\" )"},{"path":"https://difm-brain.github.io/ofpetrial/reference/make_exp_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make experimental plots/strips inside the field boundary — make_exp_plots","text":"input_plot_info (data.fram list two data.frames) list plot information created make_input_plot() boundary_data (character) path field boundary file boundary sf abline_data (character sf) path ab-line file ab-line sf abline_type (character) type ab-line generation. Select \"free\", \"lock\", \"none\"","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/make_exp_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make experimental plots/strips inside the field boundary — make_exp_plots","text":"tibble include experimental plots sf","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/make_exp_plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make experimental plots/strips inside the field boundary — make_exp_plots","text":"","code":"n_plot_info <-   prep_plot(     input_name = \"NH3\",     unit_system = \"imperial\",     machine_width = 30,     section_num = 1,     harvester_width = 20,     headland_length = 30,     side_length = 60   )  exp_data <-   make_exp_plots(     input_plot_info = n_plot_info,     boundary_data = system.file(\"extdata\", \"boundary-simple1.shp\", package = \"ofpetrial\"),     abline_data = system.file(\"extdata\", \"ab-line-simple1.shp\", package = \"ofpetrial\"),     abline_type = \"free\"   ) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `experiment_plots_dissolved = list(...)`. #> ℹ In row 1. #> Caused by warning: #> ! package ‘sf’ was built under R version 4.2.3  exp_data$exp_plots #> [[1]] #> Simple feature collection with 190 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 353001.7 ymin: 4331433 xmax: 353363.3 ymax: 4332225 #> Projected CRS: WGS 84 / UTM zone 28N #> First 10 features: #>    plot_id poly_line strip_id                       geometry #> 1        1       1_1        1 POLYGON ((353349.3 4331437,... #> 2        2       1_1        1 POLYGON ((353350.7 4331516,... #> 3        3       1_1        1 POLYGON ((353352.1 4331594,... #> 4        4       1_1        1 POLYGON ((353353.5 4331673,... #> 5        5       1_1        1 POLYGON ((353354.9 4331752,... #> 6        6       1_1        1 POLYGON ((353356.3 4331831,... #> 7        7       1_1        1 POLYGON ((353357.7 4331909,... #> 8        8       1_1        1 POLYGON ((353359.1 4331988,... #> 9        9       1_1        1 POLYGON ((353360.5 4332067,... #> 10      10       1_1        1 POLYGON ((353361.9 4332146,... #>"},{"path":"https://difm-brain.github.io/ofpetrial/reference/make_trial_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create trial design report — make_trial_report","title":"Create trial design report — make_trial_report","text":"function creates html report describing trial design created user assign_rates() includes figures showing machine alignment","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/make_trial_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create trial design report — make_trial_report","text":"","code":"make_trial_report(td, folder_path, trial_name = NA, keep_rmd = FALSE)"},{"path":"https://difm-brain.github.io/ofpetrial/reference/make_trial_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create trial design report — make_trial_report","text":"td trial design created assign_rates() folder_path (character) path folder report saved trial_name (character) name trial used report keep_rmd (logical) FALSE (Default), original rmd file deleted upon creating html report. Otherwise, rmd file saved folder specified `folder_path`.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/make_trial_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create trial design report — make_trial_report","text":"path resulting html file (invisible)","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/make_trial_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create trial design report — make_trial_report","text":"","code":"#--- load experiment made by assign_rates() ---# # \\donttest{ data(td_single_input) make_trial_report(   td = td_single_input,   folder_path = tempdir() ) # }"},{"path":"https://difm-brain.github.io/ofpetrial/reference/ofpetrial-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ofpetrial: Design on-Farm Precision Field Agronomic Trials — ofpetrial-package","title":"ofpetrial: Design on-Farm Precision Field Agronomic Trials — ofpetrial-package","text":"comprehensive system designing implementing -farm precision field agronomic trials. provide field data, tell 'ofpetrial' design trial, get readily-usable trial design files report checks validity reliability trial design.","code":""},{"path":[]},{"path":"https://difm-brain.github.io/ofpetrial/reference/ofpetrial-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ofpetrial: Design on-Farm Precision Field Agronomic Trials — ofpetrial-package","text":"Maintainer: Taro  Mieno tmieno2@unl.edu (ORCID) [copyright holder] Authors: Brittani Edge bedge2@illinois.edu [contributor]","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://difm-brain.github.io/ofpetrial/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/plot_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot information — plot_info","title":"Plot information — plot_info","text":"Plot information creating experiment plots using `make_exp_plot()`. data exists purpose making examples function references succinct.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/plot_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot information — plot_info","text":"","code":"plot_info"},{"path":"https://difm-brain.github.io/ofpetrial/reference/plot_info.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plot information — plot_info","text":"data.frame `plot_info` data frame 1 rows 10 columns: input_name input name unit_system measurement system (metric imperial) machine_width width applicator/planter section_num number sections machine section_width width section machine harvester_width width harvester plot_width width plots made headland_length length headland side_length length side min_plot_length minimum plot length allowed max_plot_length maximum plot length allowed","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/prep_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare plot information for a single-input experiment (length in meter) — prep_plot","title":"Prepare plot information for a single-input experiment (length in meter) — prep_plot","text":"Prepare plot information single-input experiment case. length values need specified meter.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/prep_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare plot information for a single-input experiment (length in meter) — prep_plot","text":"","code":"prep_plot(   input_name,   unit_system,   machine_width,   section_num,   harvester_width,   plot_width = NA,   headland_length = NA,   side_length = NA,   max_plot_width = NA,   min_plot_length = NA,   max_plot_length = NA )"},{"path":"https://difm-brain.github.io/ofpetrial/reference/prep_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare plot information for a single-input experiment (length in meter) — prep_plot","text":"input_name (character) Input name unit_system (character) character either 'metric' 'imperial' indicating system measurement used machine_width (numeric) numeric number units specified unit_system indicates width applicator planter input section_num (numeric) numeric number indicates number sections applicator planter input harvester_width (numeric) numeric number indicates width harvester plot_width (numeric) Default c(NA, NA). headland_length (numeric) numeric number indicates length headland (long non-experimental space direction machines drive). Default NA. side_length (numeric) numeric number indicates length two sides field (long non-experimental space direction perpendicular direction machines). Default NA. max_plot_width (numeric) Maximum width plots. Default 36.576 meter (120 feet). min_plot_length (numeric) Minimum length plots. Default 73.152 meter (240 feet). max_plot_length (numeric) Maximum length plots. Default 91.440 meter (300 feet)","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/prep_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare plot information for a single-input experiment (length in meter) — prep_plot","text":"tibble plot information necessary create experiment plots","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/prep_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare plot information for a single-input experiment (length in meter) — prep_plot","text":"","code":"input_name <- \"seed\" unit_system <- \"metric\" machine_width <- 12 section_num <- 12 plot_width <- NA harvester_width <- 24 prep_plot(input_name, unit_system, machine_width, section_num, harvester_width) #> # A tibble: 1 × 11 #>   input_name unit_system machine_width section_num section_width harvester_width #>   <chr>      <chr>               <dbl>       <dbl>         <dbl>           <dbl> #> 1 seed       metric                 12          12             1              24 #> # ℹ 5 more variables: plot_width <dbl>, headland_length <dbl>, #> #   side_length <dbl>, min_plot_length <dbl>, max_plot_length <dbl>"},{"path":"https://difm-brain.github.io/ofpetrial/reference/prep_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data of input rate information for a single input — prep_rate","title":"Create data of input rate information for a single input — prep_rate","text":"Create data input rate information single input checks validity information provided user. can used assign rates experiment plots using assign_rates().","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/prep_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data of input rate information for a single input — prep_rate","text":"","code":"prep_rate(   plot_info,   gc_rate,   unit,   rates = NULL,   min_rate = NA,   max_rate = NA,   num_rates = 5,   design_type = NA,   rank_seq_ws = NULL,   rank_seq_as = NULL,   rate_jump_threshold = NA )"},{"path":"https://difm-brain.github.io/ofpetrial/reference/prep_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data of input rate information for a single input — prep_rate","text":"plot_info (data.frame) plot information created make_input_plot_data gc_rate (numeric) Input rate grower chosen running experiment. rate assigned non-experiment part field. rate also becomes one trial input rates unless specify trial rates directly using rates argument unit (string) unit input rates (numeric vector) Default NULL. Sequence trial rates ascending order. min_rate (numeric) minimum input rate. Ignored rates specified. max_rate (numeric) maximum input rate. Ignored rates specified num_rates (numeric) Default 5. even number design_type \"ejca\". Ignored rates specified. design_type (string) type trial design. available options Latin Square (\"ls\"), Strip (\"str\"), Randomized Strip (\"rstr\"), Randomized Block (\"rb\"), Sparse (\"sparse\"), Extra Jump-conscious Alternate \"ejca\". See article trial design details. rank_seq_ws (integer) vector integers indicating order ranking rates, repeated \"within\" strip. rank_seq_as (integer) vector integers indicating order ranking rates, repeated \"across\" strip first plots. rate_jump_threshold (integer) highest jump rate rank acceptable","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/prep_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data of input rate information for a single input — prep_rate","text":"data.frame input rate information","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/prep_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data of input rate information for a single input — prep_rate","text":"","code":"plot_info <-   prep_plot(     input_name = \"seed\",     unit_system = \"imperial\",     machine_width = 60,     section_num = 24,     harvester_width = 30,     plot_width = 30   ) #>   prep_rate(   plot_info,   gc_rate = 30000,   unit = \"seeds\",   rates = c(20000, 25000, 30000, 35000, 40000) ) #> You did not specify design_type. It is assumed to be of type ls. #> # A tibble: 1 × 12 #>   input_name design_type gc_rate unit  tgt_rate_original tgt_rate_equiv min_rate #>   <chr>      <lgl>         <dbl> <chr> <list>            <list>         <lgl>    #> 1 seed       NA            30000 seeds <dbl [5]>         <dbl [5]>      NA       #> # ℹ 5 more variables: max_rate <lgl>, num_rates <int>, rank_seq_ws <list>, #> #   rank_seq_as <list>, rate_jump_threshold <lgl>"},{"path":"https://difm-brain.github.io/ofpetrial/reference/rate_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate information — rate_info","title":"Rate information — rate_info","text":"Rate information assigning rates experiment plots using `assign_rates()` function. data exists purpose making examples function references succinct.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/rate_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate information — rate_info","text":"","code":"rate_info"},{"path":"https://difm-brain.github.io/ofpetrial/reference/rate_info.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rate information — rate_info","text":"data.frame `rate_info` data frame 1 rows 7 columns: input_name input name design_type type trial design created gc_rate normal rate grower used running experiment unit unit input rates_data data.frame rates ranks rank_seq_ws vector ranking rates repeated within strip rank_seq_as vector ranking rates repeated first rate strips","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/td_curved.html","id":null,"dir":"Reference","previous_headings":"","what":"Trial design (single-input) for a curved field — td_curved","title":"Trial design (single-input) for a curved field — td_curved","text":"Trial design data created assigning rates experiment plots running `assign_rates()` function. data exists purpose making examples function references succinct.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/td_curved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trial design (single-input) for a curved field — td_curved","text":"","code":"td_curved"},{"path":"https://difm-brain.github.io/ofpetrial/reference/td_curved.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Trial design (single-input) for a curved field — td_curved","text":"tbl_df tbl data.frame `td_curved` data frame 1 rows 9 columns: input_name input name input_type shorthand type input: \"N\" nitrogen, \"S\" seed, etc. trial_design experiment plots input rats assigned sf object design_type type trial design used unit unit input abline_type (character) one \"free\", \"lock\", \"none\" indicating way ab-line () created ab_lines ab-lines applicator/planter sf object harvest_ab_lines ab-lines harvester sf object field_sf field boundary sf object harvest_width width harvester","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/td_single_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Trial design (single-input) — td_single_input","title":"Trial design (single-input) — td_single_input","text":"Trial design data created assigning rates experiment plots running `assign_rates()` function. data exists purpose making examples function references succinct.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/td_single_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trial design (single-input) — td_single_input","text":"","code":"td_single_input"},{"path":"https://difm-brain.github.io/ofpetrial/reference/td_single_input.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Trial design (single-input) — td_single_input","text":"tbl_df tbl data.frame `td_single_input` data frame 1 rows 9 columns: input_name input name input_type shorthand type input: \"N\" nitrogen, \"S\" seed, etc. trial_design experiment plots input rats assigned sf object design_type type trial design used unit unit input abline_type (character) one \"free\", \"lock\", \"none\" indicating way ab-line () created ab_lines ab-lines applicator/planter sf object harvest_ab_lines ab-lines harvester sf object field_sf field boundary sf object harvest_width width harvester","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/td_two_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Trial design (two-input) — td_two_input","title":"Trial design (two-input) — td_two_input","text":"Trial design data created assigning rates experiment plots running `assign_rates()` function. data exists purpose making examples function references succinct.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/td_two_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trial design (two-input) — td_two_input","text":"","code":"td_two_input"},{"path":"https://difm-brain.github.io/ofpetrial/reference/td_two_input.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Trial design (two-input) — td_two_input","text":"tbl_df tbl data.frame `td_two_input` data frame 1 rows 9 columns: input_name input name input_type shorthand type input: \"N\" nitrogen, \"S\" seed, etc. trial_design experiment plots input rats assigned sf object design_type type trial design used unit unit input abline_type (character) one \"free\", \"lock\", \"none\" indicating way ab-line () created ab_lines ab-lines applicator/planter sf object harvest_ab_lines ab-lines harvester sf object field_sf field boundary sf object harvest_width width harvester","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/viz.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize various aspects of a trial design — viz","title":"Visualize various aspects of a trial design — viz","text":"Create plots experiment rates, plot layout, plot_id, strip_id, block_id, can specified `type` argument.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/viz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize various aspects of a trial design — viz","text":"","code":"viz(   td,   type = \"rates\",   input_index = c(1, 2),   text_size = 3,   abline = FALSE,   leaflet = FALSE )"},{"path":"https://difm-brain.github.io/ofpetrial/reference/viz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize various aspects of a trial design — viz","text":"td (tibble) experiment plots made make_exp_plots() type (character) type plots create. Available options \"rates\", \"layout\", \"plot_id\", \"strip_id\", \"block_id\", \"ab_line\" input_index (numeric) vector length 1 2. 1 means 1st input td, 2 means second input td, c(1, 2) means inputs, DEFAULT text_size (numeric) size plot ID, strip ID, block ID numbers printed plots abline (logical) TRUE, ab-lines displayed well. Default = FALSE. applies ton type = \"rates\" type = \"layout\". leaflet (logical) TRUE, plot superimposed satellite imagery field. Default FALSE. option effective type = \"rates\".","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/viz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize various aspects of a trial design — viz","text":"ggplot leaflet (leaflet == TRUE) object","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/viz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize various aspects of a trial design — viz","text":"","code":"#--- load trial design ---# data(td_two_input) viz(td_two_input)"},{"path":"https://difm-brain.github.io/ofpetrial/reference/write_trial_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Write trial design files for field implementation — write_trial_files","title":"Write trial design files for field implementation — write_trial_files","text":"Write necessary files implement trial design created. Exported files include","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/write_trial_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write trial design files for field implementation — write_trial_files","text":"","code":"write_trial_files(td, folder_path, ext = \"shp\", zip = FALSE, zip_name = NA)"},{"path":"https://difm-brain.github.io/ofpetrial/reference/write_trial_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write trial design files for field implementation — write_trial_files","text":"td (tibble) tibble trial design created applying assign_rate() experimental plots made make_exp_plots(). folder_path (character) path folder files saved ext (character) Default = \"shp\". Extension use save files, \"geojson\" extension supported sf::st_write() zip (logical) Default = FALSE. TRUE, files written zipped. zip_name (character) name zip file created zip = TRUE.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/write_trial_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write trial design files for field implementation — write_trial_files","text":"nothing","code":""},{"path":"https://difm-brain.github.io/ofpetrial/reference/write_trial_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write trial design files for field implementation — write_trial_files","text":"","code":"#--- load trial design ---# data(td_two_input)  write_trial_files(   td = td_two_input,   folder_path = tempdir(),   zip = FALSE ) #> Writing the trial design as .shp files.  #> Writing the trial design as .shp files.  #> Writing the ab-lines as .shp files.  #> Writing the ab-lines as .shp files.  #> Writing the harvester ab-line as .shp file."},{"path":"https://difm-brain.github.io/ofpetrial/news/index.html","id":"ofpetrial-011","dir":"Changelog","previous_headings":"","what":"ofpetrial 0.1.1","title":"ofpetrial 0.1.1","text":"option using leaflet see experimental plots satellite image field added viz() create_strips() (internal function) overhauled pass R CMD check Fedora ATLAS. Specifically, st_tilt(), used used function, abandoned. fixed bug viz() presented gc_rate","code":""},{"path":"https://difm-brain.github.io/ofpetrial/news/index.html","id":"ofpetrial-01","dir":"Changelog","previous_headings":"","what":"ofpetrial 0.1","title":"ofpetrial 0.1","text":"first complete set functions make package functional useful users design implement -farm precision experiments.","code":""},{"path":"https://difm-brain.github.io/ofpetrial/news/index.html","id":"prepare-plot-and-rate-information-0-1","dir":"Changelog","previous_headings":"","what":"Prepare plot and rate information","title":"ofpetrial 0.1","text":"prep_plot() prep_rate()","code":""},{"path":"https://difm-brain.github.io/ofpetrial/news/index.html","id":"generate-trial-designs-0-1","dir":"Changelog","previous_headings":"","what":"Generate trial designs","title":"ofpetrial 0.1","text":"make_exp_plots() assign_rates()","code":""},{"path":"https://difm-brain.github.io/ofpetrial/news/index.html","id":"modify-input-rates-0-1","dir":"Changelog","previous_headings":"","what":"Modify input rates","title":"ofpetrial 0.1","text":"add_blocks() change_rates()","code":""},{"path":"https://difm-brain.github.io/ofpetrial/news/index.html","id":"diagnose-trial-design-0-1","dir":"Changelog","previous_headings":"","what":"Diagnose trial design","title":"ofpetrial 0.1","text":"check_ortho_inputs() check_ortho_with_chars() check_alignment()","code":""},{"path":"https://difm-brain.github.io/ofpetrial/news/index.html","id":"visualization-0-1","dir":"Changelog","previous_headings":"","what":"Visualization","title":"ofpetrial 0.1","text":"viz()","code":""},{"path":"https://difm-brain.github.io/ofpetrial/news/index.html","id":"make-trial-design-reports-0-1","dir":"Changelog","previous_headings":"","what":"Make trial design reports","title":"ofpetrial 0.1","text":"make_trial_report()","code":""},{"path":"https://difm-brain.github.io/ofpetrial/news/index.html","id":"write-out-files-0-1","dir":"Changelog","previous_headings":"","what":"Write out files","title":"ofpetrial 0.1","text":"write_trial_files()","code":""},{"path":"https://difm-brain.github.io/ofpetrial/news/index.html","id":"data-0-1","dir":"Changelog","previous_headings":"","what":"Data","title":"ofpetrial 0.1","text":"plot_info exp_data rate_info td_single_input td_two_input td_curved","code":""}]
