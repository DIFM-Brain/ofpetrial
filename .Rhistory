plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_plot_info <- list(seed_plot_info, n_plot_info)
##### Make Plots #####
exp_data <-
make_exp_plots(
input_plot_info = input_plot_info,
boundary_data = system.file("extdata", "boundary-simple1.shp", package = "ofpetrial"),
abline_data = system.file("extdata", "ab-line-simple1.shp", package = "ofpetrial"),
abline_type = "free"
)
##### Prep Rates #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_rate_info = list(seed_rate_info, n_rate_info)
##### Assign Rates #####
td_ls_1 <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info))
td <- td_ls_1
folder_path <- "/Users/brittaniedge/Library/Mobile Documents/com~apple~CloudDocs/Documents/R Package Work"
land_unit <- "acre"
trial_name <- "Brittani's test trial"
units = "imperial"
all_trial_info <- td %>%
mutate(land_unit = land_unit) %>%
mutate(trial_name = trial_name) %>%
rowwise() %>%
mutate(field_size = get_field_size(trial_design, land_unit)) %>%
mutate(plot_number = get_plot_number(trial_design)) %>%
mutate(plot_length = list(get_plot_length(trial_design, plot_width))) %>%
mutate(num_harv_pass_in_plot = plot_width/harvester_width) %>%
mutate(rate_number = get_rate_number(trial_design)) %>%
mutate(rates = list(get_trial_rates(trial_design))) %>%
mutate(headland_size = if(units == "metric"){headland_length}else{conv_unit(headland_length, "m", "feet")}) %>%
mutate(sideland_size = if(units == "metric"){side_length}else{conv_unit(side_length, "m", "feet")}) %>%
mutate(plot = list(get_plot(trial_design, ab_lines, input_name))) %>%
mutate(map_design = list(
tm_shape(trial_design) +
tm_polygons(
col = "rate",
title = input_name,
palette = ifelse(input_name == "seed", "Greens", "Greys")
)
)) %>%
mutate(trial_design = list(trial_design %>%
mutate(area = as.numeric(st_area(.))) %>%
mutate(type = case_when(
type == "headland" ~ "Border Buffer",
type <= "experiment" ~ "Trial Area")))) %>%
mutate(map_headlands = list(
tm_shape(trial_design) +
tm_polygons(
col = "type",
title = "Type of Field Area",
palette= c('red', 'grey')
)))
if (nrow(td) == 1){
machine_table <- data.table(width = c(td$harvester_width[1], td$machine_width),
machine_type = c("harvester", ifelse(td$input_name == "seed", "planter", "applicator")),
ab_line = list(td$harvest_ab_lines[[1]][1,], td$ab_lines[[1]])) %>%
mutate(number_in_plot = max(all_trial_info$num_harv_pass_in_plot)) %>%
mutate(height = max(width)/4) %>%
.[, machine_type := factor(machine_type, levels = c("applicator", "planter", "harvester"))] %>%
setorder(., cols = "machine_type") %>%
mutate(machine_id = row_number()) %>%
rowwise() %>%
mutate(trial_plot = list(all_trial_info$plot[[1]])) %>%
mutate(move_vec = list(get_move_vec(ab_line))) %>%
mutate(center = list(find_center(ab_line, number_in_plot, trial_plot, move_vec, machine_id, width, height))) %>%
mutate(machine_poly = list(make_machine_polygon(width, height, center, move_vec, st_crs(trial_plot)))) %>%
mutate(map_ab = list(tmap_abline(ab_line, machine_type, trial_plot))) %>%
mutate(map_poly = list(tmap_machine(machine_poly, machine_type, trial_plot))) %>%
mutate(map_label = list(tmap_label(center, machine_type, trial_plot)))
}else{
machine_table <- data.table(width = c(td$harvester_width[1], td$machine_width),
machine_type = c("harvester", ifelse(td$input_name == "seed", "planter", "applicator")),
ab_line = list(td$harvest_ab_lines[[1]][1,], td$ab_lines[[1]], td$ab_lines[[2]])) %>%
mutate(number_in_plot = max(all_trial_info$num_harv_pass_in_plot)) %>%
mutate(height = max(width)/4) %>%
.[, machine_type := factor(machine_type, levels = c("applicator", "planter", "harvester"))] %>%
setorder(., cols = "machine_type") %>%
mutate(machine_id = row_number()) %>%
rowwise() %>%
mutate(trial_plot = list(rbind(all_trial_info$plot[[1]], all_trial_info$plot[[2]]))) %>%
mutate(move_vec = list(get_move_vec(ab_line))) %>%
mutate(center = list(find_center(ab_line, number_in_plot, trial_plot, move_vec, machine_id, width, height))) %>%
mutate(machine_poly = list(make_machine_polygon(width, height, center, move_vec, st_crs(trial_plot)))) %>%
mutate(map_ab = list(tmap_abline(ab_line, machine_type, trial_plot))) %>%
mutate(map_poly = list(tmap_machine(machine_poly, machine_type, trial_plot))) %>%
mutate(map_label = list(tmap_label(center, machine_type, trial_plot)))
}
dir.create(file.path(folder_path, "ofpe_temp_folder"))
saveRDS(all_trial_info, file.path(folder_path, "ofpe_temp_folder", "all_trial_info.rds"))
saveRDS(machine_table, file.path(folder_path, "ofpe_temp_folder", "machine_table.rds"))
#/*=================================================*/
#' # Rmd
#/*=================================================*/
td_rmd <-
readLines(if(nrow(all_trial_info) > 1){
system.file("rmdtemplate", "make-trial-design-template-one-input.Rmd", package = "ofpetrial")
}else{
system.file("rmdtemplate", "make-trial-design-template-two-inputs.Rmd", package = "ofpetrial")
}
) %>%
gsub("_all-trial-info-here_", file.path(folder_path, "ofpe_temp_folder", "all_trial_info.rds"), .) %>%
gsub("_machine-table-here_", file.path(folder_path, "ofpe_temp_folder", "machine_table.rds"), .) %>%
gsub("_trial-name_", all_trial_info$trial_name[[1]], .) %>%
gsub("_length-unit_", ifelse(units == "metric", "meter", "foot"), .) %>%
gsub("_land-unit_", land_unit, .) %>%
gsub("_field-size_", all_trial_info$field_size[[1]], .) %>%
gsub("_headland-size_", all_trial_info$headland_size[[1]], .) %>%
gsub("_sideland-size_", all_trial_info$sideland_size[[1]], .)
#/*=================================================*/
#' # Wrapping up
#/*=================================================*/
td_file_name <- file.path(folder_path, "trial_design_report.Rmd")
writeLines(td_rmd, con = td_file_name)
#--- render ---#
render(input = td_file_name, output_file = file.path(folder_path, "trial_design_report.html"))
units
(units == "metric")
text_harvester_passes <- function(all_trial_info){
if(nrow(all_trial_info) > 1){
if(all_trial_info$plot_width[[1]] == all_trial_info$plot_width[[2]]){
if(units == "metric"){
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
all_trial_info$harvester_width[[1]],
"-meter harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units))
}else{
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
conv_unit(all_trial_info$harvester_width[[1]], "m", "ft"),
"-foot harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units))
}
}else{
if(units == "metric"){
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
all_trial_info$harvester_width[[1]],
"-meter harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" and ",
as.character(english(all_trial_info$num_harv_pass_in_plot[[2]])),
" ",
all_trial_info$harvester_width[[2]],
"-meter harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[2]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units),
", respectively")
}else{
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
conv_unit(all_trial_info$harvester_width[[1]], "m", "ft"),
"-foot harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" and ",
as.character(english(all_trial_info$num_harv_pass_in_plot[[2]])),
" ",
conv_unit(all_trial_info$harvester_width[[2]], "m", "ft"),
"-foot harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[2]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units),
", respectively")
}
}
}else{
if(units == "metric"){
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
all_trial_info$harvester_width[[1]],
"-meter harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units))
}else{
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
conv_unit(all_trial_info$harvester_width[[1]], "m", "ft"),
"-foot harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units))
}
}
}
library(knitr)
knitr::opts_chunk$set(
cache = FALSE,
echo = TRUE,
error = TRUE,
warning = FALSE,
cache.lazy = FALSE,
message = FALSE,
fig.width = 12,
fig.height = 12
)
all_trial_info = readRDS(file.path("/Users/brittaniedge/Library/Mobile Documents/com~apple~CloudDocs/Documents/R Package Work/ofpe_temp_folder/all_trial_info.rds"))
machine_table = readRDS(file.path("/Users/brittaniedge/Library/Mobile Documents/com~apple~CloudDocs/Documents/R Package Work/ofpe_temp_folder/machine_table.rds"))
# === packages ===#
# library(bookdown)
# library(pracma)
# library(furrr)
# library(exactextractr)
# library(sp)
# library(sf)
# library(agricolae)
# library(lwgeom)
# library(measurements)
# library(stringr)
# library(tmap)
# library(raster)
# library(tidyverse)
# library(data.table)
# library(purrr)
# library(DT)
# library(geojsonsf)
# library(rmarkdown)
# library(knitr)
# library(parallel)
# library(jsonlite)
# library(smoother)
# library(zip)
all_trial_info$map_design[[1]] + tm_layout(
legend.outside = "TRUE",
frame = FALSE,
legend.title.size = 2,
legend.text.size = 1.5
)
rep_table <- all_trial_info %>%
rowwise() %>%
mutate(rep_table = list(
trial_design %>% group_by(rate) %>%
summarise(Replicates = n(),
.groups = 'drop') %>%
data.frame() %>%
dplyr::select(rate, Replicates) %>%
dplyr::rename("Target Rate" = "rate")))
rep_table$rep_table[[1]] %>%
kable(caption = paste0("Replicates of each ", rep_table$input_name[[1]], " Target Rate"))
all_trial_info$map_headlands[[1]] + tm_layout(
legend.outside = "TRUE",
frame = FALSE,
legend.title.size = 2,
legend.text.size = 1.5
)
ab_maps <- list()
poly_maps <- list()
label_maps <- list()
for (i in 1:(nrow(machine_table)-1)){
ab_maps[[i]] <- paste0("machine_table$map_ab[[", i, "]]")
poly_maps[[i]] <- paste0("machine_table$map_poly[[", i, "]]")
label_maps[[i]] <- paste0("machine_table$map_label[[", i, "]]")
}
tm_shape(machine_table$trial_plot[[1]], bbox = st_bbox(machine_table$trial_plot[[1]])) +
tm_borders(col = "black") +
eval(parse(text = paste0(ab_maps, collapse = " + "))) +
eval(parse(text = paste0(poly_maps, collapse = " + "))) +
eval(parse(text = paste0(label_maps, collapse = " + "))) +
tm_add_legend(type = "line",
labels = c("Planter AB-line", "Applicator AB-line"),
col = c("#009E73", "#0072B2"),
lty = c("dashed", "solid"),
title = "AB-Lines") +
tm_add_legend(type = "symbol",
labels = c("Planter", "Applicator"),
col = c("#009E73", "#0072B2"),
shape = 0,
title = "Machine Polygons") +
tm_add_legend(type = "symbol",
labels = c("Trial Plot"),
col = c("black"),
shape = 0) +
tm_layout(legend.outside = TRUE,
frame = FALSE,
bg.color = "grey85")
text_harvester_passes(all_trial_info)
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
unlink(file.path(folder_path, "ofpe_temp_folder"), recursive = TRUE)
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
text_harvester_passes <- function(all_trial_info, units){
if(nrow(all_trial_info) > 1){
if(all_trial_info$plot_width[[1]] == all_trial_info$plot_width[[2]]){
if(units == "metric"){
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
all_trial_info$harvester_width[[1]],
"-meter harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units))
}else{
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
conv_unit(all_trial_info$harvester_width[[1]], "m", "ft"),
"-foot harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units))
}
}else{
if(units == "metric"){
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
all_trial_info$harvester_width[[1]],
"-meter harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" and ",
as.character(english(all_trial_info$num_harv_pass_in_plot[[2]])),
" ",
all_trial_info$harvester_width[[2]],
"-meter harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[2]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units),
", respectively")
}else{
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
conv_unit(all_trial_info$harvester_width[[1]], "m", "ft"),
"-foot harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" and ",
as.character(english(all_trial_info$num_harv_pass_in_plot[[2]])),
" ",
conv_unit(all_trial_info$harvester_width[[2]], "m", "ft"),
"-foot harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[2]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units),
", respectively")
}
}
}else{
if(units == "metric"){
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
all_trial_info$harvester_width[[1]],
"-meter harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units))
}else{
paste0(as.character(english(all_trial_info$num_harv_pass_in_plot[[1]])),
" ",
conv_unit(all_trial_info$harvester_width[[1]], "m", "ft"),
"-foot harvester swath",
if(all_trial_info$num_harv_pass_in_plot[[1]] > 1){"s"}else{""},
" will lie neatly within each ",
text_plot_width(all_trial_info, units))
}
}
}
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
#!===========================================================
# ! Check and debug
# !===========================================================
#--- regenerate documents reflecting the changes and apply load_all() ---#
devtools::document()
devtools::load_all()
#--- run all the examples to check error ---#
devtools::run_examples(pkg = here::here())
#--- check if the yaml can be read successfully ---#
readLines("./_pkgdown.yml")
# !===========================================================
# ! Create datasets for examples
# !===========================================================
source("dev/generate_datasets.R")
# !===========================================================
# ! Build website
# !===========================================================
#--- build pkgdown website ---#
pkgdown::build_site()
##### Function for making report #####
devtools::install_github("DIFM-Brain/ofpetrial")
library(ofpetrial)
# library(english)
##### Prepare plots ####
seed_plot_info <-
prep_plot_f(
input_name = "seed",
machine_width = 60,
section_num = 24,
harvester_width = 30,
plot_width = 30
)
seed_plot_info
n_plot_info <-
prep_plot_f(
input_name = "NH3",
machine_width = 30,
section_num = 1,
harvester_width = 30,
plot_width = 30
)
##### Preparing Inputs #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_plot_info <- list(seed_plot_info, n_plot_info)
##### Make Plots #####
exp_data <-
make_exp_plots(
input_plot_info = input_plot_info,
boundary_data = system.file("extdata", "boundary-simple1.shp", package = "ofpetrial"),
abline_data = system.file("extdata", "ab-line-simple1.shp", package = "ofpetrial"),
abline_type = "free"
)
##### Prep Rates #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_rate_info = list(seed_rate_info, n_rate_info)
##### Assign Rates #####
td_ls_1 <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info))
##### Testing #####
# td <- td_ls_1
folder_path <- "/Users/brittaniedge/Library/Mobile Documents/com~apple~CloudDocs/Documents/R Package Work"
land_unit <- "acre"
trial_name <- "Brittani's test trial"
units = "imperial"
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
get_plot_length <- function(trial_design, plot_width){
trial_design %>%
mutate(area = as.numeric(st_area(.))/plot_width) %>%
pull(area) %>%
quantile(., c(0.1, 0.9)) %>%
round(.)
}
View(all_trial_info)
View(all_trial_info[[28]][[2]])
View(machine_table)
View(machine_table[[7]][[3]])
