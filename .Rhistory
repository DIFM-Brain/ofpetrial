mutate(machine_id = row_number()) %>%
rowwise() %>%
# mutate(ab_line = list(st_transform_utm(ab_line))) %>%
mutate(trial_plot = list(get_plot(trial_design = td$trial_design[[1]], ab_lines = td$ab_lines[[1]][1,]))) %>%
mutate(move_vec = list(get_move_vec(ab_line))) %>%
mutate(center = list(find_center(ab_line, number_in_plot, trial_plot, move_vec, machine_id, width, height))) %>%
mutate(machine_poly = list(make_machine_polygon(width, height, center, move_vec, st_crs(trial_plot)))) %>%
mutate(map_ab = list(tmap_abline(ab_line, machine_type, trial_plot))) %>%
mutate(map_poly = list(tmap_machine(machine_poly, machine_type, trial_plot))) %>%
mutate(map_label = list(tmap_label(center, machine_type, trial_plot)))
}
dir.create(file.path(folder_path, "ofpe_temp_folder"))
saveRDS(all_trial_info, file.path(folder_path, "ofpe_temp_folder", "all_trial_info.rds"))
saveRDS(machine_table, file.path(folder_path, "ofpe_temp_folder", "machine_table.rds"))
#/*=================================================*/
#' # Rmd
#/*=================================================*/
td_rmd <-
readLines(if(nrow(all_trial_info) > 1){
system.file("rmdtemplate", "make-trial-design-template-one-input.Rmd", package = "ofpetrial")
}else{
system.file("rmdtemplate", "make-trial-design-template-two-inputs.Rmd", package = "ofpetrial")
}
) %>%
gsub("_all-trial-info-here_", file.path(folder_path, "ofpe_temp_folder", "all_trial_info.rds"), .) %>%
gsub("_machine-table-here_", file.path(folder_path, "ofpe_temp_folder", "machine_table.rds"), .) %>%
gsub("_trial-name_", all_trial_info$trial_name[[1]], .) %>%
gsub("_length-unit_", ifelse(units == "metric", "meter", "foot"), .) %>%
gsub("_land-unit_", land_unit, .) %>%
gsub("_field-size_", all_trial_info$field_size[[1]], .) %>%
gsub("_headland-size_", all_trial_info$headland_size[[1]], .) %>%
gsub("_sideland-size_", all_trial_info$sideland_size[[1]], .)
#/*=================================================*/
#' # Wrapping up
#/*=================================================*/
td_file_name <- file.path(folder_path, "trial_design_report.Rmd")
writeLines(td_rmd, con = td_file_name)
#--- render ---#
render(input = td_file_name, output_file = file.path(folder_path, "trial_design_report.html"))
# unlink(file.path(folder_path, "ofpe_temp_folder"), recursive = TRUE)
viewer <- getOption("viewer")
viewer(file.path(folder_path, "trial_design_report.html"))
}
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
text_plant_apply <- function(machine_table){
if (nrow(machine_table) > 2){
paste0(ifelse(machine_table$input_name[[1]] == "seed", "plant", "apply"), " and ", ifelse(machine_table$input_name[[2]] == "seed", "plant", "apply"))
}else{
paste0(ifelse(machine_table$input_name[[1]] == "seed", "plant", "apply"))
}
}
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
##### Function for making report #####
devtools::install_github("DIFM-Brain/ofpetrial")
##### Prepare plots ####
seed_plot_info <-
prep_plot_f(
input_name = "seed",
machine_width = 60,
section_num = 24,
harvester_width = 30,
plot_width = 30
)
seed_plot_info
n_plot_info <-
prep_plot_f(
input_name = "NH3",
machine_width = 30,
section_num = 1,
harvester_width = 30,
plot_width = 30
)
##### Preparing Inputs #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_plot_info <- list(seed_plot_info, n_plot_info)
##### Make Plots #####
exp_data <-
make_exp_plots(
input_plot_info = input_plot_info,
boundary_data = system.file("extdata", "boundary-simple1.shp", package = "ofpetrial"),
abline_data = system.file("extdata", "ab-line-simple1.shp", package = "ofpetrial"),
abline_type = "free"
)
##### Prep Rates #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_rate_info = list(seed_rate_info, n_rate_info)
##### Assign Rates #####
td_ls_1 <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info))
##### Testing #####
folder_path <- "/Users/brittaniedge/Library/Mobile Documents/com~apple~CloudDocs/Documents/R Package Work"
land_unit <- "acre"
trial_name <- "Brittani's test trial"
units = "imperial"
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
##### Function for making report #####
devtools::install_github("DIFM-Brain/ofpetrial")
##### Prepare plots ####
seed_plot_info <-
prep_plot_f(
input_name = "seed",
machine_width = 60,
section_num = 24,
harvester_width = 30,
plot_width = 30
)
seed_plot_info
n_plot_info <-
prep_plot_f(
input_name = "NH3",
machine_width = 30,
section_num = 1,
harvester_width = 30,
plot_width = 30
)
##### Preparing Inputs #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_plot_info <- list(seed_plot_info, n_plot_info)
##### Make Plots #####
exp_data <-
make_exp_plots(
input_plot_info = input_plot_info,
boundary_data = system.file("extdata", "boundary-simple1.shp", package = "ofpetrial"),
abline_data = system.file("extdata", "ab-line-simple1.shp", package = "ofpetrial"),
abline_type = "free"
)
##### Prep Rates #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_rate_info = list(seed_rate_info, n_rate_info)
##### Assign Rates #####
td_ls_1 <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info))
folder_path <- "/Users/brittaniedge/Library/Mobile Documents/com~apple~CloudDocs/Documents/R Package Work"
land_unit <- "acre"
trial_name <- "Brittani's test trial"
units = "imperial"
make_trial_report <- function(td, land_unit, units, trial_name, folder_path = getwd()){
all_trial_info <- td %>%
mutate(land_unit = land_unit) %>%
mutate(trial_name = trial_name) %>%
rowwise() %>%
mutate(field_size = get_field_size(trial_design, land_unit)) %>%
mutate(plot_number = get_plot_number(trial_design)) %>%
mutate(plot_width =   if (units == "Imperial"){
plot_width = conv_unit(plot_width, "m", "ft")
}else{
plot_width = plot_width
}) %>%
mutate(plot_length = list(get_plot_length(trial_design, plot_width))) %>%
mutate(rate_number = get_rate_number(trial_design)) %>%
mutate(rates = list(get_trial_rates(trial_design))) %>%
mutate(headland_size = if(units == "metric"){headland_length}else{conv_unit(headland_length, "m", "feet")}) %>%
mutate(sideland_size = if(units == "metric"){side_length}else{conv_unit(side_length, "m", "feet")}) %>%
mutate(map_design = list(
tm_shape(trial_design) +
tm_polygons(
col = "rate",
title = input_name,
palette = ifelse(input_name == "seed", "Greens", "Greys")
)
)) %>%
mutate(trial_design = list(trial_design %>%
mutate(area = as.numeric(st_area(.))) %>%
mutate(type = case_when(
type == "headland" ~ "Border Buffer",
type <= "experiment" ~ "Trial Area")))) %>%
mutate(map_headlands = list(
tm_shape(trial_design) +
tm_polygons(
col = "type",
title = "Type of Field Area",
palette= c('red', 'grey')
)))
if (nrow(td) == 1){
machine_table <- data.table(width = c(td$harvester_width[1], td$machine_width),
machine_type = c("harvester", ifelse(td$input_name == "seed", "planter", "applicator")),
ab_line = list(td$harvest_ab_lines[[1]][1,], td$ab_lines[[1]])) %>%
mutate(number_in_plot = td$plot_width/width) %>%
mutate(height = max(width)/4) %>%
.[, machine_type := factor(machine_type, levels = c("applicator", "planter", "harvester"))] %>%
setorder(., cols = "machine_type") %>%
mutate(machine_id = row_number()) %>%
rowwise() %>%
# mutate(ab_line = list(st_transform_utm(ab_line))) %>%
mutate(trial_plot = list(get_plot(trial_design = td$trial_design[[1]], ab_lines = td$ab_lines[[1]][1,]))) %>%
mutate(move_vec = list(get_move_vec(ab_line))) %>%
mutate(center = list(find_center(ab_line, number_in_plot, trial_plot, move_vec, machine_id, width, height))) %>%
mutate(machine_poly = list(make_machine_polygon(width, height, center, move_vec, st_crs(trial_plot)))) %>%
mutate(map_ab = list(tmap_abline(ab_line, machine_type, trial_plot))) %>%
mutate(map_poly = list(tmap_machine(machine_poly, machine_type, trial_plot))) %>%
mutate(map_label = list(tmap_label(center, machine_type, trial_plot)))
}else{
machine_table <- data.table(width = c(td$harvester_width[1], td$machine_width),
machine_type = c("harvester", ifelse(td$input_name == "seed", "planter", "applicator")),
ab_line = list(td$harvest_ab_lines[[1]][1,], td$ab_lines[[1]], td$ab_lines[[2]])) %>%
mutate(number_in_plot = td$plot_width/width) %>%
mutate(height = max(width)/4) %>%
.[, machine_type := factor(machine_type, levels = c("applicator", "planter", "harvester"))] %>%
setorder(., cols = "machine_type") %>%
mutate(machine_id = row_number()) %>%
rowwise() %>%
# mutate(ab_line = list(st_transform_utm(ab_line))) %>%
mutate(trial_plot = list(get_plot(trial_design = td$trial_design[[1]], ab_lines = td$ab_lines[[1]][1,]))) %>%
mutate(move_vec = list(get_move_vec(ab_line))) %>%
mutate(center = list(find_center(ab_line, number_in_plot, trial_plot, move_vec, machine_id, width, height))) %>%
mutate(machine_poly = list(make_machine_polygon(width, height, center, move_vec, st_crs(trial_plot)))) %>%
mutate(map_ab = list(tmap_abline(ab_line, machine_type, trial_plot))) %>%
mutate(map_poly = list(tmap_machine(machine_poly, machine_type, trial_plot))) %>%
mutate(map_label = list(tmap_label(center, machine_type, trial_plot)))
}
dir.create(file.path(folder_path, "ofpe_temp_folder"))
saveRDS(all_trial_info, file.path(folder_path, "ofpe_temp_folder", "all_trial_info.rds"))
saveRDS(machine_table, file.path(folder_path, "ofpe_temp_folder", "machine_table.rds"))
#/*=================================================*/
#' # Rmd
#/*=================================================*/
td_rmd <-
readLines(if(nrow(all_trial_info) > 1){
system.file("rmdtemplate", "make-trial-design-template-one-input.Rmd", package = "ofpetrial")
}else{
system.file("rmdtemplate", "make-trial-design-template-two-inputs.Rmd", package = "ofpetrial")
}
) %>%
gsub("_all-trial-info-here_", file.path(folder_path, "ofpe_temp_folder", "all_trial_info.rds"), .) %>%
gsub("_machine-table-here_", file.path(folder_path, "ofpe_temp_folder", "machine_table.rds"), .) %>%
gsub("_trial-name_", all_trial_info$trial_name[[1]], .) %>%
gsub("_length-unit_", ifelse(units == "metric", "meter", "foot"), .) %>%
gsub("_land-unit_", land_unit, .) %>%
gsub("_field-size_", all_trial_info$field_size[[1]], .) %>%
gsub("_headland-size_", all_trial_info$headland_size[[1]], .) %>%
gsub("_sideland-size_", all_trial_info$sideland_size[[1]], .)
#/*=================================================*/
#' # Wrapping up
#/*=================================================*/
td_file_name <- file.path(folder_path, "trial_design_report.Rmd")
writeLines(td_rmd, con = td_file_name)
#--- render ---#
render(input = td_file_name, output_file = file.path(folder_path, "trial_design_report.html"))
unlink(file.path(folder_path, "ofpe_temp_folder"), recursive = TRUE)
viewer <- getOption("viewer")
viewer(file.path(folder_path, "trial_design_report.html"))
}
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
text_plant_apply <- function(machine_table){
if (nrow(machine_table) > 2){
paste0(ifelse(machine_table$input_name[[1]] == "seed", "plant", "apply"), " and ", ifelse(machine_table$input_name[[2]] == "seed", "plant", "apply"))
}else{
paste0(ifelse(machine_table$input_name[[1]] == "seed", "plant", "apply"))
}
}
text_plant_apply <- function(machine_table){
if (nrow(machine_table) > 2){
paste0(ifelse(machine_table$input_name[[1]] == "seed", "plant", "apply"), " and ", ifelse(machine_table$input_name[[2]] == "seed", "plant", "apply"))
}else{
paste0(ifelse(machine_table$input_name[[1]] == "seed", "plant", "apply"))
}
}
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
#!===========================================================
# ! Check and debug
# !===========================================================
#--- regenerate documents reflecting the changes and apply load_all() ---#
devtools::document()
devtools::load_all()
#--- run all the examples to check error ---#
devtools::run_examples(pkg = here::here())
#--- check if the yaml can be read successfully ---#
readLines("./_pkgdown.yml")
# !===========================================================
# ! Create datasets for examples
# !===========================================================
source("dev/generate_datasets.R")
# !===========================================================
# ! Build website
# !===========================================================
#--- build pkgdown website ---#
pkgdown::build_site()
##### Function for making report #####
devtools::install_github("DIFM-Brain/ofpetrial")
##### Prepare plots ####
seed_plot_info <-
prep_plot_f(
input_name = "seed",
machine_width = 60,
section_num = 24,
harvester_width = 30,
plot_width = 30
)
seed_plot_info
n_plot_info <-
prep_plot_f(
input_name = "NH3",
machine_width = 30,
section_num = 1,
harvester_width = 30,
plot_width = 30
)
##### Preparing Inputs #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_plot_info <- list(seed_plot_info, n_plot_info)
##### Make Plots #####
exp_data <-
make_exp_plots(
input_plot_info = input_plot_info,
boundary_data = system.file("extdata", "boundary-simple1.shp", package = "ofpetrial"),
abline_data = system.file("extdata", "ab-line-simple1.shp", package = "ofpetrial"),
abline_type = "free"
)
##### Prep Rates #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_rate_info = list(seed_rate_info, n_rate_info)
##### Assign Rates #####
td_ls_1 <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info))
devtools::install_github("DIFM-Brain/ofpetrial")
##### Prepare plots ####
seed_plot_info <-
prep_plot_f(
input_name = "seed",
machine_width = 60,
section_num = 24,
harvester_width = 30,
plot_width = 30
)
seed_plot_info
n_plot_info <-
prep_plot_f(
input_name = "NH3",
machine_width = 30,
section_num = 1,
harvester_width = 30,
plot_width = 30
)
##### Preparing Inputs #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_plot_info <- list(seed_plot_info, n_plot_info)
##### Make Plots #####
exp_data <-
make_exp_plots(
input_plot_info = input_plot_info,
boundary_data = system.file("extdata", "boundary-simple1.shp", package = "ofpetrial"),
abline_data = system.file("extdata", "ab-line-simple1.shp", package = "ofpetrial"),
abline_type = "free"
)
##### Prep Rates #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
input_rate_info = list(seed_rate_info, n_rate_info)
##### Assign Rates #####
td_ls_1 <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info))
folder_path <- "/Users/brittaniedge/Library/Mobile Documents/com~apple~CloudDocs/Documents/R Package Work"
land_unit <- "acre"
trial_name <- "Brittani's test trial"
units = "imperial"
make_trial_report(td_ls_1, land_unit, units, trial_name, folder_path)
