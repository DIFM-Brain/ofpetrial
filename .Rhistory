ggtitle(paste0("Strip ID of experiment plots for ", input_name))
))
} else if (type == "plot_id") {
gg_td <-
td_rows %>%
dplyr::mutate(g_fig = list(
ggplot() +
geom_sf(data = trial_design, fill = NA) +
geom_sf_text(
data = trial_design,
aes(label = plot_id),
size = text_size,
fun.geometry = sf::st_centroid
) +
theme_void() +
ggtitle(paste0("Plot ID of experiment plots for ", input_name))
))
} else if (type == "rates") {
gg_td <-
td_rows %>%
dplyr::mutate(rate_data = list(data.table(tgt_rate_original,
tgt_rate_equiv,
total_equiv) %>%
rowwise() %>%
mutate(all_units = paste(unique(c(tgt_rate_original, tgt_rate_equiv, total_equiv)), collapse = " | " )) %>%
dplyr::rename("rate" = "tgt_rate_original"))) %>%
dplyr::mutate(g_tr = list(
ggplot() +
geom_sf(data = field_sf, fill = NA) +
geom_sf(data = trial_design %>%
merge(rate_data, by = "rate") %>%
mutate(all_units = as.factor(all_units)), aes(fill = factor(all_units)), color = "black") +
scale_fill_viridis_d(name = if(input_name == "seed"){
if(unit_system == "metric"){
"Seeding Rate (ha)"
}else{
"Seeding Rate (ac)"
}
}else if(include_base_rate == FALSE & input_name != "seed"){
if(unit_system == "metric"){
paste0(input_name, " (", unit, "/ha) | ", input_type, " Equivalent (kg/ha) \n", "No base application")
}else{
paste0(input_name, " (", unit, "/ac) | ", input_type, " Equivalent (lb/ha) \n", "No base application")
}
}else{
if(unit_system == "metric"){
paste0(input_name, " (", unit, "/ha) | ", input_type, " Equivalent (kg/ha) | ", "Total ", input_type, " (kg/ha) \n", paste0("Base application: ", base_rate_equiv, " (kg/ha)"))
}else{
paste0(input_name, " (", unit, "/ac) | ", input_type, " Equivalent (lb/ha) | ", "Total ", input_type, " (lb/ac) \n", paste0("Base application: ", base_rate_equiv, " (lbs/ac)"))
}
}) +
theme_void() +
ggtitle(
paste0(
"Trial design for ",
input_name,
"\n(",
dplyr::case_when(
design_type == "ls" ~ "Latin Square",
design_type == "strip" ~ "Strip",
design_type == "rb" ~ "Randomized Block",
design_type == "jcls" ~ "Jump-conscious Latin Square",
design_type == "ejca" ~ "Extra Jump-conscious Alternate",
design_type == "sparse" ~ "Sparse"
),
")"
)
)
)) %>%
dplyr::mutate(g_fig = list(
if (abline == TRUE) {
g_tr +
geom_sf(data = ab_lines, aes(color = "applicator/planter ab-line")) +
geom_sf(data = harvest_ab_lines, aes(color = "harvester ab-line")) +
scale_color_manual(
name = "",
values = c(
"applicator/planter ab-line" = "red", "harvester ab-line" = "blue"
)
)
} else {
g_tr
}
)) %>%
dplyr::select(g_fig)
} else if (type == "layout") {
gg_td <-
td_rows %>%
dplyr::mutate(g_exp = list(
ggplot() +
geom_sf(data = field_sf, fill = NA) +
geom_sf(data = exp_plots, fill = NA, color = "blue") +
theme_void() +
ggtitle(paste0("Trial plots for ", input_name))
)) %>%
dplyr::mutate(g_fig = list(
if (abline == TRUE) {
g_exp +
geom_sf(data = ab_lines, aes(color = "applicator/planter ab-line")) +
geom_sf(data = harvest_ab_lines, aes(color = "harvester ab-line")) +
scale_color_manual(
name = "",
values = c(
"applicator/planter ab-line" = "red", "harvester ab-line" = "blue"
)
)
} else {
g_exp
}
))
} else if (type == "ab_line") {
#--- determine the stack orientation ---#
line_bbox <-
td_rows$ab_lines[[1]] %>%
sf::st_bbox()
x_length <- line_bbox["xmax"] - line_bbox["xmin"]
y_length <- line_bbox["ymax"] - line_bbox["ymin"]
if (x_length > y_length) {
stack_ab_orientation <- "vertical"
} else {
stack_ab_orientation <- "horizontal"
}
gg_td <-
td_rows %>%
dplyr::mutate(g_ab = list(
ggplot() +
geom_sf(data = dplyr::filter(trial_design, strip_id %in% 1:3)) +
geom_sf(data = ab_lines, color = "red") +
theme_void() +
ggtitle(paste0("Applicator/Planter ab-line\n", "(", input_name, ")"))
)) %>%
dplyr::mutate(g_h_ab = list(
ggplot() +
geom_sf(data = dplyr::filter(trial_design, strip_id %in% 1:3)) +
geom_sf(data = harvest_ab_lines, color = "blue") +
theme_void() +
ggtitle("Harvester ab-line")
)) %>%
dplyr::mutate(g_fig = list(
ggpubr::ggarrange(g_ab, g_h_ab, ncol = ifelse(stack_ab_orientation == "vertical", 1, 2))
))
} else {
stop("The type you specified is not one of the allowed options.")
}
if (nrow(gg_td) > 1) {
ggpubr::ggarrange(gg_td$g_fig[[1]], gg_td$g_fig[[2]], ncol = 2)
} else {
gg_td$g_fig[[1]]
}
}
viz(td_ls_1)
#!===========================================================
# ! Check and debug
# !===========================================================
#--- regenerate documents reflecting the changes and apply load_all() ---#
devtools::document()
devtools::load_all()
#--- run all the examples to check error ---#
devtools::run_examples(pkg = here::here())
##### Function for making report #####
devtools::install_github("DIFM-Brain/ofpetrial")
library(ofpetrial)
##### Prepare plots ####
seed_plot_info <-
prep_plot(
input_name = "seed",
unit_system = "imperial",
machine_width = 60,
section_num = 24,
harvester_width = 30,
plot_width = 30
)
seed_plot_info
n_plot_info <-
prep_plot(
input_name = "NH3",
unit_system = "imperial",
machine_width = 60,
section_num = 1,
harvester_width = 30,
plot_width = 60
)
##### Preparing Inputs #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
n_rate_info
base_rate <- add_base_rate("uan32", "gallons", 10)
input_plot_info <- list(seed_plot_info, n_plot_info)
exp_data <-
make_exp_plots(
input_plot_info = input_plot_info,
boundary_data = system.file("extdata", "boundary-simple1.shp", package = "ofpetrial"),
abline_data = system.file("extdata", "ab-line-simple1.shp", package = "ofpetrial"),
abline_type = "free"
)
##### Prep Rates #####
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
seed_rate_info
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1),
base_rate = base_rate
)
n_rate_info
input_rate_info = list(seed_rate_info, n_rate_info)
td_ls_1 <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info))
td_ls_1
viz(td_ls_1)
#!===========================================================
# ! Check and debug
# !===========================================================
#--- regenerate documents reflecting the changes and apply load_all() ---#
devtools::document()
devtools::load_all()
#--- run all the examples to check error ---#
devtools::run_examples(pkg = here::here())
#++++++++++++++++++++++++++++++++++++
#+ plot info
#++++++++++++++++++++++++++++++++++++
plot_info <-
prep_plot(
input_name = "NH3",
unit_system = "imperial",
machine_width = 30,
section_num = 1,
harvester_width = 20,
headland_length = 30,
side_length = 60
)
usethis::use_data(plot_info, overwrite = TRUE)
#++++++++++++++++++++++++++++++++++++
#+ experiment plots
#++++++++++++++++++++++++++++++++++++
exp_data <-
make_exp_plots(
input_plot_info = plot_info,
boundary_data = system.file("extdata", "boundary-simple1.shp", package = "ofpetrial"),
abline_data = system.file("extdata", "ab-line-simple1.shp", package = "ofpetrial"),
abline_type = "free"
)
usethis::use_data(exp_data, overwrite = TRUE)
#++++++++++++++++++++++++++++++++++++
#+ rate information
#++++++++++++++++++++++++++++++++++++
base_info <-
add_base_rate(
"uan28",
"gallons",
15
)
rate_info <-
prep_rate(
plot_info = plot_info,
gc_rate = 30,
unit = "gallons",
rates = c(10, 20, 30, 40, 50),
design_type = "ls",
rank_seq_ws = c(1, 2, 3, 4, 5),
rank_seq_as = c(1, 2, 3, 4, 5),
base_rate = base_info
)
usethis::use_data(rate_info, overwrite = TRUE)
#++++++++++++++++++++++++++++++++++++
#+ trial design (single-input)
#++++++++++++++++++++++++++++++++++++
td_single_input <-
assign_rates(
exp_data = exp_data,
rate_info = rate_info
)
td_single_input
# colnames(trial_design)
usethis::use_data(td_single_input, overwrite = TRUE)
#--- check the size (1.5 Mb) ---#
object.size(td_single_input)
#++++++++++++++++++++++++++++++++++++
#+ trial design (two-input)
#++++++++++++++++++++++++++++++++++++
seed_plot_info <-
prep_plot(
input_name = "seed",
unit_system = "imperial",
machine_width = 60,
section_num = 24,
harvester_width = 30,
plot_width = 30
)
n_plot_info <-
prep_plot(
input_name = "NH3",
unit_system = "imperial",
machine_width = 45,
section_num = 1,
harvester_width = 30,
plot_width = 45
)
input_plot_info <- list(seed_plot_info, n_plot_info)
exp_data <-
make_exp_plots(
input_plot_info = input_plot_info,
boundary_data = system.file("extdata", "boundary-simple1.shp", package = "ofpetrial"),
abline_data = system.file("extdata", "ab-line-simple1.shp", package = "ofpetrial"),
abline_type = "free"
)
exp_data$exp_plots
seed_rate_info <-
prep_rate(
plot_info = seed_plot_info,
gc_rate = 32000,
unit = "seed",
min_rate = 16000,
max_rate = 40000,
num_rates = 5,
design_type = "jcls"
)
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
rank_seq_ws = c(5, 4, 3, 2, 1)
)
td_two_input <- assign_rates(exp_data, rate_info = list(seed_rate_info, n_rate_info))
#--- check the size (1.5 Mb) ---#
object.size(td_two_input)
usethis::use_data(td_two_input, overwrite = TRUE)
#!===========================================================
#! Trial design for a curved field
#!===========================================================
n_plot_info <-
prep_plot(
input_name = "NH3",
unit_system = "imperial",
machine_width = 30,
section_num = 1,
harvester_width = 20,
headland_length = 30,
side_length = 60
)
exp_data <-
make_exp_plots(
input_plot_info = n_plot_info,
boundary_data = system.file("extdata", "boundary-irregular1.shp", package = "ofpetrial"),
abline_data = system.file("extdata", "ab-line-irregular1.shp", package = "ofpetrial"),
abline_type = "free"
)
n_rate_info <-
prep_rate(
plot_info = n_plot_info,
gc_rate = 180,
unit = "lb",
rates = c(100, 140, 180, 220, 260),
design_type = "ls",
)
td_curved <-
assign_rates(
exp_data = exp_data,
rate_info = n_rate_info
)
usethis::use_data(td_curved, overwrite = TRUE)
# !===========================================================
# ! Build website
# !===========================================================
#--- build pkgdown website ---#
pkgdown::build_site()
# !===========================================================
# ! Build website
# !===========================================================
#--- build pkgdown website ---#
pkgdown::build_site()
#!===========================================================
# ! Check and debug
# !===========================================================
#--- regenerate documents reflecting the changes and apply load_all() ---#
devtools::document()
devtools::load_all()
#--- run all the examples to check error ---#
devtools::run_examples(pkg = here::here())
#!===========================================================
# ! Check and debug
# !===========================================================
#--- regenerate documents reflecting the changes and apply load_all() ---#
devtools::document()
devtools::load_all()
#--- run all the examples to check error ---#
devtools::run_examples(pkg = here::here())
#!===========================================================
# ! Check and debug
# !===========================================================
#--- regenerate documents reflecting the changes and apply load_all() ---#
devtools::document()
devtools::load_all()
#--- run all the examples to check error ---#
devtools::run_examples(pkg = here::here())
#--- check if the yaml can be read successfully ---#
readLines("./_pkgdown.yml")
# !===========================================================
# ! Create datasets for examples
# !===========================================================
source("dev/generate_datasets.R")
# !===========================================================
# ! Build website
# !===========================================================
#--- build pkgdown website ---#
pkgdown::build_site()
#!===========================================================
# ! Check and debug
# !===========================================================
#--- regenerate documents reflecting the changes and apply load_all() ---#
devtools::document()
devtools::load_all()
#--- run all the examples to check error ---#
devtools::run_examples(pkg = here::here())
#--- check if the yaml can be read successfully ---#
readLines("./_pkgdown.yml")
# !===========================================================
# ! Create datasets for examples
# !===========================================================
source("dev/generate_datasets.R")
# !===========================================================
# ! Build website
# !===========================================================
#--- build pkgdown website ---#
pkgdown::build_site()
#!===========================================================
# ! Check and debug
# !===========================================================
#--- regenerate documents reflecting the changes and apply load_all() ---#
devtools::document()
devtools::load_all()
#--- run all the examples to check error ---#
devtools::run_examples(pkg = here::here())
#--- check if the yaml can be read successfully ---#
readLines("./_pkgdown.yml")
# !===========================================================
# ! Create datasets for examples
# !===========================================================
source("dev/generate_datasets.R")
# !===========================================================
# ! Build website
# !===========================================================
#--- build pkgdown website ---#
pkgdown::build_site()
##### Function for making report #####
devtools::install_github("DIFM-Brain/ofpetrial")
source(here("R", 'assign_rates.R'))
source(here("R", 'change_rates.R'))
source(here("R", 'data.R'))
source(here("R", 'diagnose.R'))
source(here("R", 'globals.R'))
source(here("R", 'make_exp_plots.R'))
source(here("R", 'make_trial_report.R'))
source(here("R", 'prepare_plot_info.R'))
source(here("R", 'prepare_rate_info.R'))
source(here("R", 'utility_spatial.R'))
source(here("R", 'utility.R'))
source(here("R", 'utils-pipe.R'))
source(here("R", 'visualization.R'))
source(here("R", 'write_trial_files.R'))
#!===========================================================
# ! Check and debug
# !===========================================================
#--- regenerate documents reflecting the changes and apply load_all() ---#
devtools::document()
devtools::load_all()
#--- run all the examples to check error ---#
devtools::run_examples(pkg = here::here())
#--- check if the yaml can be read successfully ---#
readLines("./_pkgdown.yml")
# !===========================================================
# ! Create datasets for examples
# !===========================================================
source("dev/generate_datasets.R")
# !===========================================================
# ! Build website
# !===========================================================
#--- build pkgdown website ---#
pkgdown::build_site()
