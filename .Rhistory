geom_sf(data = trial_design %>%
merge(rate_data, by = "rate") %>%
mutate(all_units = as.factor(all_units)), aes(fill = factor(all_units)), color = "black") +
scale_fill_viridis_d(name = if(input_name == "seed"){
if(units == "metric"){
"Seeding Rate (ha)"
}else{
"Seeding Rate (ac)"
}
}else if(include_base_rate == FALSE & input_name != "seed"){
if(units == "metric"){
paste0(input_name, " (", unit, "/ha) | ", input_type, " Equivalent (kg/ha) \n", "No base application")
}else{
paste0(input_name, " (", unit, "/ac) | ", input_type, " Equivalent (lb/ha) \n", "No base application")
}
}else{
if(units == "metric"){
paste0(input_name, " (", unit, "/ha) | ", input_type, " Equivalent (kg/ha) | ", "Total ", input_type, " (kg/ha) \n", paste0("Base application: ", base_rate_equiv, " (kg/ha)"))
}else{
paste0(input_name, " (", unit, "/ac) | ", input_type, " Equivalent (lb/ha) | ", "Total ", input_type, " (lb/ac) \n", paste0("Base application: ", base_rate_equiv, " (lbs/ac)"))
}
}) +
theme_void() +
ggtitle(
paste0(
"Trial design for ",
input_name,
"\n(",
dplyr::case_when(
design_type == "ls" ~ "Latin Square",
design_type == "strip" ~ "Strip",
design_type == "rb" ~ "Randomized Block",
design_type == "jcls" ~ "Jump-conscious Latin Square",
design_type == "ejca" ~ "Extra Jump-conscious Alternate",
design_type == "sparse" ~ "Sparse"
),
")"
)
)
)) %>%
dplyr::mutate(g_fig = list(
if (abline == TRUE) {
g_tr +
geom_sf(data = ab_lines, aes(color = "applicator/planter ab-line")) +
geom_sf(data = harvest_ab_lines, aes(color = "harvester ab-line")) +
scale_color_manual(
name = "",
values = c(
"applicator/planter ab-line" = "red", "harvester ab-line" = "blue"
)
)
} else {
g_tr
}
)) %>%
dplyr::select(g_fig)
abline = FALSE
gg_td <-
td_rows %>%
dplyr::mutate(rate_data = list(data.table(tgt_rate_original,
tgt_rate_equiv,
total_equiv) %>%
rowwise() %>%
mutate(all_units = paste(unique(c(tgt_rate_original, tgt_rate_equiv, total_equiv)), collapse = " | " )) %>%
dplyr::rename("rate" = "tgt_rate_original"))) %>%
dplyr::mutate(g_tr = list(
ggplot() +
geom_sf(data = field_sf, fill = NA) +
geom_sf(data = trial_design %>%
merge(rate_data, by = "rate") %>%
mutate(all_units = as.factor(all_units)), aes(fill = factor(all_units)), color = "black") +
scale_fill_viridis_d(name = if(input_name == "seed"){
if(units == "metric"){
"Seeding Rate (ha)"
}else{
"Seeding Rate (ac)"
}
}else if(include_base_rate == FALSE & input_name != "seed"){
if(units == "metric"){
paste0(input_name, " (", unit, "/ha) | ", input_type, " Equivalent (kg/ha) \n", "No base application")
}else{
paste0(input_name, " (", unit, "/ac) | ", input_type, " Equivalent (lb/ha) \n", "No base application")
}
}else{
if(units == "metric"){
paste0(input_name, " (", unit, "/ha) | ", input_type, " Equivalent (kg/ha) | ", "Total ", input_type, " (kg/ha) \n", paste0("Base application: ", base_rate_equiv, " (kg/ha)"))
}else{
paste0(input_name, " (", unit, "/ac) | ", input_type, " Equivalent (lb/ha) | ", "Total ", input_type, " (lb/ac) \n", paste0("Base application: ", base_rate_equiv, " (lbs/ac)"))
}
}) +
theme_void() +
ggtitle(
paste0(
"Trial design for ",
input_name,
"\n(",
dplyr::case_when(
design_type == "ls" ~ "Latin Square",
design_type == "strip" ~ "Strip",
design_type == "rb" ~ "Randomized Block",
design_type == "jcls" ~ "Jump-conscious Latin Square",
design_type == "ejca" ~ "Extra Jump-conscious Alternate",
design_type == "sparse" ~ "Sparse"
),
")"
)
)
)) %>%
dplyr::mutate(g_fig = list(
if (abline == TRUE) {
g_tr +
geom_sf(data = ab_lines, aes(color = "applicator/planter ab-line")) +
geom_sf(data = harvest_ab_lines, aes(color = "harvester ab-line")) +
scale_color_manual(
name = "",
values = c(
"applicator/planter ab-line" = "red", "harvester ab-line" = "blue"
)
)
} else {
g_tr
}
)) %>%
dplyr::select(g_fig)
gg_td
gg_td[[1]]
gg_td[[2]]
ggpubr::ggarrange(gg_td$g_fig[[1]], gg_td$g_fig[[2]], ncol = 2)
#' @param abline (logical) If TRUE, ab-lines are displayed as well. Default = FALSE. This applies only ton type = "rates" and type = "layout".
#' @returns plot as a ggplot object
#' @import ggplot2
#' @export
#' @examples
#' #--- load trial design ---#
#' data(td_two_input)
#' viz(td_two_input)
#' viz(td_two_input, type = "plot_id")
#'
viz <- function(td, type = "rates", input_index = c(1, 2), text_size = 3, abline = FALSE) {
#++++++++++++++++++++++++++++++++++++
#+ Debug
#++++++++++++++++++++++++++++++++++++
# data(td_single_input)
# td <- td_single_input
#++++++++++++++++++++++++++++++++++++
#+ Main
#++++++++++++++++++++++++++++++++++++
#--- select rows ---#
if (nrow(td) == 1) {
input_index <- 1
}
#--- determine the stack orientation ---#
field_bbox <-
td$field_sf[[1]] %>%
sf::st_bbox()
x_length <- field_bbox["xmax"] - field_bbox["xmin"]
y_length <- field_bbox["ymax"] - field_bbox["ymin"]
if (x_length > y_length) {
stack_field_orientation <- "vertical"
} else {
stack_field_orientation <- "horizontal"
}
#--- prepare data to be used across different types ---#
td_rows <-
td[input_index, ] %>%
dplyr::rowwise()
if (type == "block_id") {
gg_td <-
td_rows %>%
dplyr::mutate(g_fig = list(
ggplot() +
geom_sf(data = trial_design, aes(fill = factor(block_id))) +
geom_sf_text(
data = trial_design,
aes(label = block_id),
size = text_size,
fun.geometry = sf::st_centroid
) +
scale_fill_discrete(name = "Block ID") +
theme_void() +
ggtitle(paste0("Block ID of experiment plots for ", input_name))
))
} else if (type == "strip_id") {
gg_td <-
td_rows %>%
dplyr::mutate(g_fig = list(
ggplot() +
geom_sf(data = trial_design, aes(fill = factor(strip_id))) +
geom_sf_text(
data = trial_design,
aes(label = strip_id),
size = text_size,
fun.geometry = sf::st_centroid
) +
scale_fill_discrete(name = "Strip ID") +
theme_void() +
ggtitle(paste0("Strip ID of experiment plots for ", input_name))
))
} else if (type == "plot_id") {
gg_td <-
td_rows %>%
dplyr::mutate(g_fig = list(
ggplot() +
geom_sf(data = trial_design, fill = NA) +
geom_sf_text(
data = trial_design,
aes(label = plot_id),
size = text_size,
fun.geometry = sf::st_centroid
) +
theme_void() +
ggtitle(paste0("Plot ID of experiment plots for ", input_name))
))
} else if (type == "rates") {
gg_td <-
td_rows %>%
dplyr::mutate(rate_data = list(data.table(tgt_rate_original,
tgt_rate_equiv,
total_equiv) %>%
rowwise() %>%
mutate(all_units = paste(unique(c(tgt_rate_original, tgt_rate_equiv, total_equiv)), collapse = " | " )) %>%
dplyr::rename("rate" = "tgt_rate_original"))) %>%
dplyr::mutate(g_tr = list(
ggplot() +
geom_sf(data = field_sf, fill = NA) +
geom_sf(data = trial_design %>%
merge(rate_data, by = "rate") %>%
mutate(all_units = as.factor(all_units)), aes(fill = factor(all_units)), color = "black") +
scale_fill_viridis_d(name = if(input_name == "seed"){
if(units == "metric"){
"Seeding Rate (ha)"
}else{
"Seeding Rate (ac)"
}
}else if(include_base_rate == FALSE & input_name != "seed"){
if(units == "metric"){
paste0(input_name, " (", unit, "/ha) | ", input_type, " Equivalent (kg/ha) \n", "No base application")
}else{
paste0(input_name, " (", unit, "/ac) | ", input_type, " Equivalent (lb/ha) \n", "No base application")
}
}else{
if(units == "metric"){
paste0(input_name, " (", unit, "/ha) | ", input_type, " Equivalent (kg/ha) | ", "Total ", input_type, " (kg/ha) \n", paste0("Base application: ", base_rate_equiv, " (kg/ha)"))
}else{
paste0(input_name, " (", unit, "/ac) | ", input_type, " Equivalent (lb/ha) | ", "Total ", input_type, " (lb/ac) \n", paste0("Base application: ", base_rate_equiv, " (lbs/ac)"))
}
}) +
theme_void() +
ggtitle(
paste0(
"Trial design for ",
input_name,
"\n(",
dplyr::case_when(
design_type == "ls" ~ "Latin Square",
design_type == "strip" ~ "Strip",
design_type == "rb" ~ "Randomized Block",
design_type == "jcls" ~ "Jump-conscious Latin Square",
design_type == "ejca" ~ "Extra Jump-conscious Alternate",
design_type == "sparse" ~ "Sparse"
),
")"
)
)
)) %>%
dplyr::mutate(g_fig = list(
if (abline == TRUE) {
g_tr +
geom_sf(data = ab_lines, aes(color = "applicator/planter ab-line")) +
geom_sf(data = harvest_ab_lines, aes(color = "harvester ab-line")) +
scale_color_manual(
name = "",
values = c(
"applicator/planter ab-line" = "red", "harvester ab-line" = "blue"
)
)
} else {
g_tr
}
)) %>%
dplyr::select(g_fig)
} else if (type == "layout") {
gg_td <-
td_rows %>%
dplyr::mutate(g_exp = list(
ggplot() +
geom_sf(data = field_sf, fill = NA) +
geom_sf(data = exp_plots, fill = NA, color = "blue") +
theme_void() +
ggtitle(paste0("Trial plots for ", input_name))
)) %>%
dplyr::mutate(g_fig = list(
if (abline == TRUE) {
g_exp +
geom_sf(data = ab_lines, aes(color = "applicator/planter ab-line")) +
geom_sf(data = harvest_ab_lines, aes(color = "harvester ab-line")) +
scale_color_manual(
name = "",
values = c(
"applicator/planter ab-line" = "red", "harvester ab-line" = "blue"
)
)
} else {
g_exp
}
))
} else if (type == "ab_line") {
#--- determine the stack orientation ---#
line_bbox <-
td_rows$ab_lines[[1]] %>%
sf::st_bbox()
x_length <- line_bbox["xmax"] - line_bbox["xmin"]
y_length <- line_bbox["ymax"] - line_bbox["ymin"]
if (x_length > y_length) {
stack_ab_orientation <- "vertical"
} else {
stack_ab_orientation <- "horizontal"
}
gg_td <-
td_rows %>%
dplyr::mutate(g_ab = list(
ggplot() +
geom_sf(data = dplyr::filter(trial_design, strip_id %in% 1:3)) +
geom_sf(data = ab_lines, color = "red") +
theme_void() +
ggtitle(paste0("Applicator/Planter ab-line\n", "(", input_name, ")"))
)) %>%
dplyr::mutate(g_h_ab = list(
ggplot() +
geom_sf(data = dplyr::filter(trial_design, strip_id %in% 1:3)) +
geom_sf(data = harvest_ab_lines, color = "blue") +
theme_void() +
ggtitle("Harvester ab-line")
)) %>%
dplyr::mutate(g_fig = list(
ggpubr::ggarrange(g_ab, g_h_ab, ncol = ifelse(stack_ab_orientation == "vertical", 1, 2))
))
} else {
stop("The type you specified is not one of the allowed options.")
}
if (nrow(gg_td) > 1) {
ggpubr::ggarrange(gg_td$g_fig[[1]], gg_td$g_fig[[2]], ncol = 2)
} else {
gg_td$g_fig[[1]]
}
}
viz(td)
viz(td_two_input)
#' \dontrun{
#' make_trial_report(
#'   td_single_input,
#'   "acre",
#'   "imperial",
#'   "Test Trial",
#'   folder_path
#' )
#' }
#'
make_trial_report <- function(td, land_unit, units, trial_name, folder_path = getwd()) {
all_trial_info <- td %>%
mutate(land_unit = land_unit) %>%
mutate(trial_name = trial_name) %>%
rowwise() %>%
mutate(input_type = get_input_type(input_name)) %>%
mutate(field_size = get_field_size(trial_design, land_unit)) %>%
mutate(plot_number = get_plot_number(trial_design)) %>%
mutate(plot_length = list(get_plot_length(trial_design, plot_width))) %>%
mutate(num_harv_pass_in_plot = plot_width / harvester_width) %>%
mutate(rate_number = get_rate_number(trial_design)) %>%
mutate(rates = list(get_trial_rates(trial_design))) %>%
mutate(machines_in_plot = plot_width/machine_width) %>%
mutate(headland_size = if (units == "metric") {
headland_length
} else {
conv_unit(headland_length, "m", "feet")
}) %>%
mutate(sideland_size = if (units == "metric") {
side_length
} else {
conv_unit(side_length, "m", "feet")
}) %>%
mutate(rate_data = list(data.table(tgt_rate_original,
tgt_rate_equiv,
total_equiv) %>%
rowwise() %>%
mutate(all_units = paste(unique(c(tgt_rate_original, tgt_rate_equiv, total_equiv)), collapse = " | " )) %>%
dplyr::rename("rate" = "tgt_rate_original"))) %>%
mutate(map_design = list(
tm_shape(trial_design %>%
merge(rate_data, by = "rate") %>%
mutate(all_units = as.factor(all_units))) +
tm_polygons(
col = "all_units",
title = if(input_name == "seed"){
if(units == "metric"){
"Seeding Rate (ha)"
}else{
"Seeding Rate (ac)"
}
}else if(include_base_rate == FALSE & input_name != "seed"){
if(units == "metric"){
paste0(input_name, " (", unit, "/ha) | ", input_type, " Equivalent (kg/ha) \n", "No base application")
}else{
paste0(input_name, " (", unit, "/ac) | ", input_type, " Equivalent (lb/ha) \n", "No base application")
}
}else{
if(units == "metric"){
paste0(input_name, " (", unit, "/ha) | ", input_type, " Equivalent (kg/ha) | ", "Total ", input_type, " (kg/ha) \n", paste0("Base application: ", base_rate_equiv, " (kg/ha)"))
}else{
paste0(input_name, " (", unit, "/ac) | ", input_type, " Equivalent (lb/ha) | ", "Total ", input_type, " (lb/ac) \n", paste0("Base application: ", base_rate_equiv, " (lbs/ac)"))
}
},
palette = ifelse(input_name == "seed", "Greens", "Greys")
))) %>%
mutate(trial_design = list(trial_design %>%
mutate(area = as.numeric(st_area(.))) %>%
mutate(type = case_when(
type == "headland" ~ "Border Buffer",
type <= "experiment" ~ "Trial Area"
)))) %>%
mutate(map_headlands = list(
tm_shape(trial_design) +
tm_polygons(
col = "type",
title = "Type of Field Area",
palette = c("red", "grey")
)
))
plots = get_plots(all_trial_info)
if (nrow(td) == 1) {
machine_table <- data.table(
width = c(td$harvester_width[1], td$machine_width),
input_name = c(NA, td$input_name),
machine_type = c("harvester", ifelse(td$input_name == "seed", "planter", "applicator")),
ab_line = list(td$harvest_ab_lines[[1]][1, ], td$ab_lines[[1]])
) %>%
mutate(height = max(width) / 4) %>%
.[, machine_type := factor(machine_type, levels = c("applicator", "planter", "harvester"))] %>%
setorder(., cols = "machine_type") %>%
mutate(machine_id = row_number()) %>%
rowwise() %>%
mutate(number_in_plot = c(max(all_trial_info$num_harv_pass_in_plot), ceiling(all_trial_info$machines_in_plot))) %>%
mutate(sections_used = c(1, (1/all_trial_info$machines_in_plot))) %>%
mutate(trial_plot = list(plots)) %>%
mutate(move_vec = list(get_move_vec(ab_line))) %>%
mutate(center = list(find_center(ab_line, number_in_plot, trial_plot, move_vec, machine_id, width, height))) %>%
mutate(machine_poly = list(make_machine_polygon(width, height, center, move_vec, st_crs(trial_plot)))) %>%
mutate(map_ab = list(tmap_abline(ab_line, machine_type, trial_plot))) %>%
mutate(map_poly = list(tmap_machine(machine_poly, machine_type, trial_plot))) %>%
mutate(width_line = list(make_plot_width_line(trial_plot, move_vec, input_name, units))) %>%
mutate(map_label = list(tmap_label(center, machine_type, trial_plot))) %>%
mutate(map_plot = list(tmap_plot_all(trial_plot))) %>%
mutate(map_plot_indiv = list(tmap_plot_indiv(trial_plot, input_name, all_trial_info))) %>%
mutate(plot_legend = list(tmap_plot_legend(trial_plot)))
} else {
machine_table <- data.table(
width = c(td$harvester_width[1], td$machine_width),
input_name = c(NA, td$input_name),
machine_type = c("harvester", ifelse(td$input_name == "seed", "planter", "applicator")),
ab_line = list(td$harvest_ab_lines[[1]][1, ], td$ab_lines[[1]], td$ab_lines[[2]])
) %>%
mutate(number_in_plot = c(max(all_trial_info$num_harv_pass_in_plot), ceiling(all_trial_info$machines_in_plot))) %>%
mutate(sections_used = c(1, (1/all_trial_info$machines_in_plot))) %>%
mutate(height = max(width) / 4) %>%
.[, machine_type := factor(machine_type, levels = c("planter", "applicator", "harvester"))] %>%
setorder(., cols = "machine_type") %>%
mutate(machine_id = row_number()) %>%
rowwise() %>%
mutate(trial_plot = list(plots)) %>%
mutate(move_vec = list(get_move_vec(ab_line))) %>%
mutate(center = list(find_center(ab_line, number_in_plot, trial_plot, move_vec, machine_id, width, height))) %>%
mutate(machine_poly = list(make_machine_polygon(width, height, center, move_vec, st_crs(trial_plot)))) %>%
mutate(map_ab = list(tmap_abline(ab_line, machine_type, trial_plot))) %>%
mutate(map_poly = list(tmap_machine(machine_poly, machine_type, trial_plot))) %>%
mutate(width_line = list(make_plot_width_line(trial_plot, move_vec, input_name, units))) %>%
mutate(map_label = list(tmap_label(center, machine_type, trial_plot))) %>%
mutate(map_plot = list(tmap_plot_all(trial_plot))) %>%
mutate(map_plot_indiv = list(tmap_plot_indiv(trial_plot, input_name, all_trial_info))) %>%
mutate(plot_legend = list(tmap_plot_legend(trial_plot)))
}
dir.create(file.path(folder_path, "ofpe_temp_folder"))
saveRDS(all_trial_info, file.path(folder_path, "ofpe_temp_folder", "all_trial_info.rds"))
saveRDS(machine_table, file.path(folder_path, "ofpe_temp_folder", "machine_table.rds"))
# /*=================================================*/
#' # Rmd
# /*=================================================*/
td_rmd <-
readLines(if (nrow(all_trial_info) > 1) {
system.file("rmdtemplate", "make-trial-design-template-two-inputs.Rmd", package = "ofpetrial")
} else {
system.file("rmdtemplate", "make-trial-design-template-one-input.Rmd", package = "ofpetrial")
}) %>%
gsub("_all-trial-info-here_", file.path(folder_path, "ofpe_temp_folder", "all_trial_info.rds"), .) %>%
gsub("_machine-table-here_", file.path(folder_path, "ofpe_temp_folder", "machine_table.rds"), .) %>%
gsub("_trial-name_", all_trial_info$trial_name[[1]], .) %>%
gsub("_length-unit_", ifelse(units == "metric", "meter", "foot"), .) %>%
gsub("_land-unit_", land_unit, .) %>%
gsub("_field-size_", all_trial_info$field_size[[1]], .) %>%
gsub("_headland-size_", all_trial_info$headland_size[[1]], .) %>%
gsub("_sideland-size_", all_trial_info$sideland_size[[1]], .)
# /*=================================================*/
#' # Wrapping up
# /*=================================================*/
td_file_name <- file.path(folder_path, "trial_design_report.Rmd")
writeLines(td_rmd, con = td_file_name)
#--- render ---#
render(input = td_file_name, output_file = file.path(folder_path, "trial_design_report.html"))
unlink(file.path(folder_path, "ofpe_temp_folder"), recursive = TRUE)
viewer <- getOption("viewer")
viewer(file.path(folder_path, "trial_design_report.html"))
}
viz(td)
